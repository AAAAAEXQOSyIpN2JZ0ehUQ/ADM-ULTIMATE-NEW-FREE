#!/bin/bash

cor[1]="\033[1;33m"
cor[2]="\033[1;32m"
cor[3]="\033[1;31m"
cor[4]="\033[1;36m"
cor[5]="\033[0m"

ver_porta () {
unset pot
unset pt
pt="$1"
while true; do
teste=$(lsof -i tcp:$pt -P -n)
if [ "$teste" != "" ]; then
 if [ "$1" = "80" ]; then
 pt=$((($RANDOM %20) + 81))
 teste=$(lsof -i tcp:$pt -P -n)
 elif [ "$1" = "8080" ]; then
 pt=$((($RANDOM %20) + 8079))
 teste=$(lsof -i tcp:$pt -P -n)
 elif [ "$1" = "8799" ]; then
 pt=$((($RANDOM %20) + 8770))
 teste=$(lsof -i tcp:$pt -P -n)
 elif [ "$1" = "3128" ]; then
 pt=$((($RANDOM %20) + 3111))
 teste=$(lsof -i tcp:$pt -P -n)
 else
 pt=$((($RANDOM %20) + 100))
 teste=$(lsof -i tcp:$pt -P -n)
 fi
fi
if [ "$teste" = "" ]; then
pot="$pt"
break
fi
done
}

minhas_portas () {
sleep 3s
portas_var="/tmp/portas"
porta_var="/tmp/portas2"
lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN" > $portas_var
while read port; do
var1=$(echo $port | awk '{print $1}')
var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
if [ ! -e "$porta_var" ]; then
echo -e "$var1 $var2" > $porta_var
fi
if [ "$(cat $porta_var | grep "$var1" | grep "$var2")" = "" ]; then
echo -e "$var1 $var2" >> $porta_var
fi
done < $portas_var
i=1
while read pts; do
if [ "$pts" = "" ]; then
break
fi
service_porta[$i]=$(echo "$pts" | awk '{print $2}')
service_serv[$i]=$(echo "$pts" | awk '{print $1}')
echo -e "\033[1;37m [Porta $i]\033[1;37m Serviço: \033[1;31m${service_serv[$i]} \033[1;37mPorta: \033[1;31m${service_porta[$i]}"
i=$(($i+1))
done < $porta_var
rm $portas_var
rm $porta_var
}

install_dropbear () {
echo -e "DIGITE QUAL PORTA PRINCIPAL DESEJA USAR, 443 JA VEM ABERTA! 80,320,3128,8080...\033[1;37m"
while true; do
read -p "PORTA: " -e -i 80 pts
if [ "$pts" = "" ]; then
porta="80"
fi
if [ "$pts" = "443" ]; then
echo -e "\033[1;31mPorta 443 Ja Vem Aberta!\033[1;37m"
fi
ver_porta $pts
if [ "$pot" = "$pts" ]; then
porta="$pts"
break
 else
echo -e "\033[1;31m Porta: $pts Em Uso!"
echo -e "\033[1;32m Selecione outra! \033[1;37m"
echo ""
sleep 1s
fi
done

sysvar=$(cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/      //' | grep -o Ubuntu)

if [ "$sysvar" != "" ]; then
opcao4="2"
 else
opcao4="1"
fi

if [ "$opcao4" = "1" ]; then
echo "Port 22
Protocol 2
KeyRegenerationInterval 3600
ServerKeyBits 1024
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 120
PermitRootLogin yes
StrictModes yes
RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
PasswordAuthentication yes
X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
#UseLogin no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
UsePAM yes" > /etc/ssh/sshd_config
echo -e "${cor[2]}Instalando dropbear"
apt-get install dropbear -y > /dev/null 2>&1
touch /etc/dropbear/banner
echo -e "${cor[2]}Configurando dropbear"
echo -e "NO_START=0" > /etc/default/dropbear
echo -e "DROPBEAR_PORT=$porta" >> /etc/default/dropbear
echo -e 'DROPBEAR_EXTRA_ARGS="-p 443"' >> /etc/default/dropbear
echo -e 'DROPBEAR_BANNER="/etc/dropbear/banner"' >> /etc/default/dropbear
echo -e "DROPBEAR_RECEIVE_WINDOW=65536" >> /etc/default/dropbear
service ssh restart > /dev/null 2>&1
service dropbear restart > /dev/null 2>&1
fi
if [ "$opcao4" = "2" ]; then
echo "Port 22
Protocol 2
KeyRegenerationInterval 3600
ServerKeyBits 1024
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 120
PermitRootLogin yes
StrictModes yes
RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
PasswordAuthentication yes
X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
#UseLogin no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
UsePAM yes" > /etc/ssh/sshd_config
echo -e "${cor[2]}Instalando dropbear"
apt-get install dropbear -y > /dev/null 2>&1
touch /etc/dropbear/banner
echo -e "${cor[2]}Configurando dropbear"
echo -e "NO_START=0" > /etc/default/dropbear
echo -e "DROPBEAR_PORT=$porta" >> /etc/default/dropbear
echo -e 'DROPBEAR_EXTRA_ARGS="-p 443"' >> /etc/default/dropbear
echo -e 'DROPBEAR_BANNER="/etc/dropbear/banner"' >> /etc/default/dropbear
echo -e "DROPBEAR_RECEIVE_WINDOW=65536" >> /etc/default/dropbear
service ssh restart > /dev/null 2>&1
service dropbear restart > /dev/null 2>&1
fi
}

fun_ip () {
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
if [[ "$MEU_IP" != "$MEU_IP2" ]]; then
MEU_IP="$MEU_IP2"
 else
MEU_IP="$MEU_IP"
fi
}

fun_eth () {
eth=$(ifconfig | grep -v inet6 | grep -v lo | grep -v 127.0.0.1 | grep "encap:Ethernet" | awk '{print $1}')
if [ "$eth" != "" ]; then
echo -e "${cor[1]}Aplicar Sistema Para Melhorar Pacotes Ssh?"
echo -e "${cor[3]}Opção Para Usuarios Avançados"
read -p "[s/n]: " s_ssh
 if [[ "$s_ssh" = "s" || "$s_ssh" = "s" ]]; then
echo -e "${cor[1]}Correção de problemas de pacotes no SSH..."
echo -e "Qual A Taxa RX"
read -p "[ 1 - 999999999 ]: " rx
if [ "$rx" = "" ]; then
rx="999999999"
fi
echo -e "Qual A Taxa TX"
read -p "[ 1 - 999999999 ]: " tx
if [ "$tx" = "" ]; then
tx="999999999"
fi
apt-get install ethtool -y > /dev/null 2>&1
ethtool -G $eth rx $rx tx $tx > /dev/null 2>&1
 fi
fi
}

install_squid () {
ver_porta 80
porta[1]="$pot"
ver_porta 8080
porta[2]="$pot"
ver_porta 8799
porta[3]="$pot"
ver_porta 3128
porta[4]="$pot"

fun_ip
echo -e "\033[1;32m INSTALAÇÃO SQUID \033[1;37m"
echo ""
read -p "Digite seu IP: " -e -i $MEU_IP ip
apt-get update -y > /dev/null 2>&1
apt-get upgrade -y > /dev/null 2>&1
apt-get install squid3 -y > /dev/null 2>&1
echo -e "INICIANDO INSTALAÇAO"

cp /etc/ssh/sshd_config /etc/ssh/sshd_back
cat /etc/ssh/sshd_config | grep -v "Port 443" > /etc/ssh/a
mv -f /etc/ssh/a /etc/ssh/sshd_config

if [[ -e /etc/squid/squid.conf ]]; then
var_squid="/etc/squid/squid.conf"
fi
if [[ -e /etc/squid3/squid.conf ]]; then
var_squid="/etc/squid3/squid.conf"
fi

echo -e ".bookclaro.com.br/\n.claro.com.ar/\n.claro.com.br/\n.claro.com.co/\n.claro.com.ec/\n.claro.com.gt/\n.claro.com.ni/\n.claro.com.pe/\n.claro.com.sv/\n.claro.cr/\n.clarocurtas.com.br/\n.claroideas.com/\n.claroideias.com.br/\n.claromusica.com/\n.clarosomdechamada.com.br/\n.clarovideo.com/\n.facebook.net/\n.facebook.com/\n.netclaro.com.br/\n.oi.com.br/\n.oimusica.com.br/\n.speedtest.net/\n.tim.com.br/\n.timanamaria.com.br/\n.vivo.com.br/\n.rdio.com/\n.compute-1.amazonaws.com/\n.portalrecarga.vivo.com.br/\n.vivo.ddivulga.com/" > /etc/payloads

##ProxySystem##
echo -e "\033[1;32m Agora Escolha Uma Conf Para Seu Proxy"
echo -e "|1|• Basico"
echo -e "|2|• Completo - \033[1;31mOPCAO PARA USUARIOS AVANÇADOS"
read -p "[ 1 | 2 ]: " proxy_opt
if [ "$proxy_opt" = "2" ]; then
echo "#ConfiguracaoSquiD
acl url1 dstdomain -i $ip
acl url2 dstdomain -i 127.0.0.1
acl url3 url_regex -i '/etc/payloads'
acl url4 dstdomain -i localhost
acl accept dstdomain -i GET
acl accept dstdomain -i POST
acl accept dstdomain -i OPTIONS
acl accept dstdomain -i CONNECT
acl accept dstdomain -i PUT
acl HEAD dstdomain -i HEAD
acl accept dstdomain -i TRACE
acl accept dstdomain -i OPTIONS
acl accept dstdomain -i PATCH
acl accept dstdomain -i PROPATCH
acl accept dstdomain -i DELETE
acl accept dstdomain -i REQUEST
acl accept dstdomain -i METHOD
acl accept dstdomain -i NETDATA
acl accept dstdomain -i MOVE
acl all src 0.0.0.0/0
http_access allow url1
http_access allow url2
http_access allow url3
http_access allow url4
http_access allow accept
http_access allow HEAD
http_access deny all

# Request Headers Forcing

request_header_access Allow allow all
request_header_access Authorization allow all
request_header_access WWW-Authenticate allow all
request_header_access Proxy-Authorization allow all
request_header_access Proxy-Authenticate allow all
request_header_access Cache-Control allow all
request_header_access Content-Encoding allow all
request_header_access Content-Length allow all
request_header_access Content-Type allow all
request_header_access Date allow all
request_header_access Expires allow all
request_header_access Host allow all
request_header_access If-Modified-Since allow all
request_header_access Last-Modified allow all
request_header_access Location allow all
request_header_access Pragma allow all
request_header_access Accept allow all
request_header_access Accept-Charset allow all
request_header_access Accept-Encoding allow all
request_header_access Accept-Language allow all
request_header_access Content-Language allow all
request_header_access Mime-Version allow all
request_header_access Retry-After allow all
request_header_access Title allow all
request_header_access Connection allow all
request_header_access Proxy-Connection allow all
request_header_access User-Agent allow all
request_header_access Cookie allow all
request_header_access All deny all

# Response Headers Spoofing

reply_header_access Via deny all
reply_header_access X-Cache deny all
reply_header_access X-Cache-Lookup deny all

#portas
http_port ${porta[1]}
http_port ${porta[2]}
http_port ${porta[3]}
http_port ${porta[4]}

#nome
visible_hostname ADM-MANAGER

via off
forwarded_for off
pipeline_prefetch off" > $var_squid
 else
echo "#ConfiguracaoSquiD
acl url1 dstdomain -i $ip
acl url2 dstdomain -i 127.0.0.1
acl url3 url_regex -i '/etc/payloads'
acl url4 dstdomain -i localhost
acl all src 0.0.0.0/0
http_access allow url1
http_access allow url2
http_access allow url3
http_access allow url4

#portas
http_port ${porta[1]}
http_port ${porta[2]}
http_port ${porta[3]}
http_port ${porta[4]}

#nome
visible_hostname ADM-MANAGER

via off
forwarded_for off
pipeline_prefetch off" > $var_squid
fi

fun_eth

echo -e " REINICIANDO SERVIÇOS"
squid3 -k reconfigure > /dev/null 2>&1
service ssh restart > /dev/null 2>&1
service squid3 restart > /dev/null 2>&1
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
echo -e "${cor[3]} SQUID CONFIGURADO"
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
}

while true; do
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
echo -e "\033[1;32m DROPBEAR INSTALER ADM-ULTIMATE"
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
echo -e "${cor[3]} |1|•${cor[1]} - DROPBEAR SEM PROXY SQUID"
echo -e "${cor[3]} |2|•${cor[1]} - DROPBEAR COM PROXY SQUID"
read -p "[1/2]: " opcao
case $opcao in
1)
echo -e "/bin/false" >> /etc/shells
install_dropbear
break
;;
2)
echo -e "/bin/false" >> /etc/shells
install_dropbear
install_squid
break
;;
*)
echo -e "Ops, Voce Nao Selecionou a opcao Correta... Selecione opcao 1 ou 2"
sleep 4s
clear
;;
esac
done

echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
echo -e "${cor[3]} Seu dropbear foi configurado
com sucesso"
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
minhas_portas
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
exit