#!/bin/bash

m_dir=$(pwd)
if [ "$m_dir" != "/etc/adm-lite" ]; then
 if [ ! -d "/etc/adm-lite" ]; then
 mkdir /etc/verifica
 fi
mv -f $m_dir/$0 /etc/adm-lite/
fi

u_dir="./userDIR"
tmp_verifica="./tmp_tmp"
_arquivo1="tmp_arq1"
_arquivo2="tmp_arq2"
_arquivo3="tmp_arq3"
_arquivo4="tmp_arq4"

if [ ! -d "$u_dir" ]; then 
mkdir $u_dir
fi

function_dropb () {
  if which tput >/dev/null 2>&1; then
  ncolors=$(tput colors)
  fi
  if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    BOLD="$(tput bold)"
    NORMAL="$(tput sgr0)"
    else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    BOLD=""
    NORMAL=""
  fi
port_dropbear=`ps aux | grep dropbear | awk NR==1 | awk '{print $17;}'`
#porta2=`ps aux | grep dropbear | awk '/-p/ {print $21;}'`
#echo "QUAL PORTA?"
#echo "   1) $porta1 "
#echo "   2) $porta2 "
#read -p "Selecione a opção: " port_dropbear
log=/var/log/auth.log
loginsukses='Password auth succeeded'
clear
printf "${BLUE}${BOLD}"
echo ' '
printf "${NORMAL}"
printf "${BLUE}${BOLD}"
pids=`ps ax |grep dropbear |grep  " $port_dropbear" |awk -F" " '{print $1}'`
for pid in $pids
do
    pidlogs=`grep $pid $log |grep "$loginsukses" |awk -F" " '{print $3}'`
    i=0
    for pidend in $pidlogs
    do
    let i=i+1
    done
    if [ $pidend ]; then
       login=`grep $pid $log |grep "$pidend" |grep "$loginsukses"`
       PID=$pid
       user=`echo $login |awk -F" " '{print $10}' | sed -r "s/'/ /g"`
       waktu=`echo $login |awk -F" " '{print $2"-"$1,$3}'`
       while [ ${#waktu} -lt 13 ]; do
       waktu=$waktu" "
       done
       while [ ${#user} -lt 16 ]; do
       user=$user" "
       done
       while [ ${#PID} -lt 8 ]; do
       PID=$PID" "
       done
		printf "${YELLOW}${BOLD}"
     echo "$user $PID $waktu"
		printf "${BLUE}${BOLD}"
    fi
done
echo ""
printf "${NORMAL}"
return
}

function_onlines () {
(
if [ -e "$_arquivo2" ]; then
rm $_arquivo2
fi
touch $_arquivo2
for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
usurnum=$(ps -u $user | grep sshd |wc -l)
if [ "$usurnum" -gt 0 ]; then
echo "$usurnum" >> $_arquivo2
fi
done
#Segunda Etapa#
for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
usurnum=$(function_dropb | grep "$user" | wc -l)
if [ "$usurnum" -gt 0 ]; then
echo "$usurnum" >> $_arquivo2
fi
done
#Terceira Etapa#
for userovpn in `cat /etc/passwd | grep ovpn | awk -F: '{print $1}'`; do
us=$(cat /etc/openvpn/openvpn-status.log | grep $userovpn | wc -l)
if [ "$us" != "0" ]; then
echo "1" >> $_arquivo2
fi
done
#Fazendo A Soma#
_on="0"
while read usrnum; do
_on=$(($_on + $usrnum))
done < $_arquivo2
#$_on = Usuarios Conectados#
#Usuarios Vencidos
datenow=$(date +%s)
for user in $(awk -F: '{print $1}' /etc/passwd); do
expdate=$(chage -l $user|awk -F: '/Account expires/{print $2}')
echo $expdate|grep -q never && continue
datanormal=$(date -d"$expdate" '+%d/%m/%Y')
expsec=$(date +%s --date="$expdate")
diff=$(echo $datenow - $expsec|bc -l)
echo $diff|grep -q ^\- && continue
if [ ! -e $_arquivo3 ]; then
echo "1" > $_arquivo3
 else
echo "1" >> $_arquivo3
fi
done
if [ -e $_arquivo3 ]; then
vencidos[1]=$(cat $_arquivo3 | wc -l)
 else
vencidos[1]="0"
fi
if [ "${vencidos[1]}" -gt 0 ]; then
echo "$_on" > onlines
echo "${vencidos[1]}" > vencidos
 else
echo "$_on" > onlines
echo "0" > vencidos
fi
) &
}

fun_ovpn_onl () {
for userovpn in `cat /etc/passwd | grep ovpn | awk -F: '{print $1}'`; do
us=$(cat /etc/openvpn/openvpn-status.log | grep $userovpn | wc -l)
if [ "$us" != "0" ]; then
echo "$userovpn"
fi
done
}

function_usertime () {
(
tempousers="./tempo_conexao"
usr_pids_var="./userDIR"
if [ ! -e $tempousers ]; then
touch $tempousers
fi
_data_now=$(date +%s)
sleep 0.2s
 for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi system-`
do
if [ -e $usr_pids_var/$user.pid ]; then
source $usr_pids_var/$user.pid
fi
ssh_open=$(ps -u $user | grep sshd |wc -l)
ssh_drop=$(function_dropb | grep "$user" | wc -l)
if [[ -e /etc/openvpn/server.conf ]]; then
ssh_ovpn=$(fun_ovpn_onl | grep "$user" | wc -l)
 else
ssh_ovpn="0"
fi
user_pid=$(($ssh_open + $ssh_drop + $ssh_ovpn))
if [ "$user_pid" -gt "0" ]; then
 if [ "${data[$user]}" = "" ]; then
data[$user]="$_data_now"
 fi
 if [ ! -e $usr_pids_var/$user.pid2  ]; then
  if [ -e $usr_pids_var/$user.pid ]; then
cp $usr_pids_var/$user.pid $usr_pids_var/$user.pid2
  fi
 fi
fi
if [ "$user_pid" = "0" ]; then
unset data[$user]
 if [ -e "$usr_pids_var/$user.pid" ]; then
rm $usr_pids_var/$user.pid
 fi
 if [ -e $usr_pids_var/$user.pid2 ]; then
rm $usr_pids_var/$user.pid2
 fi
fi
if [ "${data[$user]}" != "" ]; then
time[$user]=$(($_data_now - ${data[$user]}))
time2[$user]=$(cat $tempousers | grep "$user" | awk '{print $2}')
  if [ "${time2[$user]}" = "" ]; then
time2[$user]="0"
  fi
timefinal[$user]=$((${time2[$user]} + ${time[$user]}))
_arquivo=$(cat $tempousers |grep -v "$user")
echo "$_arquivo" > $tempousers
echo "$user ${timefinal[$user]}" >> $tempousers
echo "data[$user]=$_data_now" > $usr_pids_var/$user.pid
fi
 done
) &
}

function_killmultiloguin () {
(
for((a=0; a<10; a++)); do
for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
num=$(function_dropb | grep "$user" | wc -l)
if [ -e $u_dir/$user ]; then
pid_limite=$(cat $u_dir/$user | grep "limite:" | awk '{print $2}')
fi
if [ "$pid_limite" = "" ]; then
pid_limite="999"
fi 
if [ "$num" -gt "$pid_limite" ]; then
for_kill=$(($nun - $pid_limite))
function_dropb | grep "$user" | awk '{print $2}' > $tmp_verifica
echo "$user $for_kill"
    for pid in `(head -n $for_kill $tmp_verifica)`; do
    kill $pid
    done
rm $tmp_verifica
fi
 if [ "$pid_limite" != "" ]; then
ps x | grep [[:space:]]$user[[:space:]] | grep -v grep | grep -v pts | awk '{print $1}' > $_arquivo1
pid_online=$(cat $_arquivo1 | wc -l)
	if [ "$pid_online" -gt "$pid_limite" ]; then
_conx=$(($pid_online - $pid_limite))
echo "$user $_conx"
_cont="1"
    for pid in `(head -n $_conx $_arquivo1)`; do
    kill $pid
    done
   fi
 rm $_arquivo1
 fi
unset _cont
unset _conx
unset line
unset tmp
unset pid_limite
unset num
unset limit
unset for_kill
done
sleep 1s
done
) &
}

fun_net () {
(
log_0="/tmp/tcpdum"
log_1="/tmp/tcpdump"
log_2="/tmp/tcpdumpLOG"
usr_dir="/etc/adm-lite/userDIR/usr_cnx"
usr_dir2="/tmp/cashuser"
if [ ! -e "$usr_dir2" ]; then
touch "$usr_dir2"
fi
if [ -e "$log_1" ]; then
mv -f $log_1 $log_2
fi
if [ ! -e $usr_dir ]; then
touch $usr_dir
fi
for pd in `ps x | grep tcpdump | grep -v grep | awk '{print $1}'`; do
kill -9 $pd > /dev/null 2>&1
done
tcpdump -s 50 -n 1> /tmp/tcpdump 2> /dev/null &
if [ ! -e /tmp/tcpdump ]; then
touch /tmp/tcpdump
fi
for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd | grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
touch /tmp/$user
ip_openssh $user > /dev/null 2>&1
ip_drop $user > /dev/null 2>&1
sed -i '/^$/d' /tmp/$user
pacotes=$(paste -sd+ /tmp/$user | bc)
rm /tmp/$user
 if [ "$(cat $usr_dir | grep "$user")" != "" ]; then
  pacotesuser=$(cat $usr_dir | grep "$user" | awk '{print $2}')
  ussrvar=$(cat $usr_dir | grep -v "$user")
  echo "$ussrvar" > $usr_dir
  pacotes=$(($pacotes+$pacotesuser))
 fi
 if [ "$pacotes" = "" ]; then
 pacotes="0"
 fi
 echo -e "$user $pacotes" >> $usr_dir2
unset pacotes
done
mv -f $usr_dir2 $usr_dir
) &
}


ip_openssh () {
user="$1"
for ip in `lsof -u $user -P -n | grep "ESTABLISHED" | awk -F "->" '{print $2}' |awk -F ":" '{print $1}' | grep -v "127.0.0.1"`; do
 packet=$(cat $log_2 | grep "$ip" | wc -l)
 echo "$packet" >> /tmp/$user
 unset packet
 done
}

ip_drop () {
user="$1"
loguser='Password auth succeeded'
touch /tmp/drop
 for ip in `cat /var/log/auth.log | tail -100 | grep "$user" | grep "$loguser" | awk -F "from" '{print $2}' | awk -F ":" '{print $1}'`; do
 if [ "$(cat /tmp/drop | grep "$ip")" = "" ]; then
 packet=$(cat $log_2 | grep "$ip" | wc -l)
 echo "$packet" >> /tmp/$user
 echo "$ip" >> /tmp/drop
 fi
 done
rm /tmp/drop
}

function_usertime > /dev/null 2>&1
function_killmultiloguin > /dev/null 2>&1
function_onlines > /dev/null 2>&1
fun_net > /dev/null 2>&1

if [ -e "$_arquivo1" ]; then
rm $_arquivo1
fi
if [ -e "$_arquivo2" ]; then
rm $_arquivo2
fi
if [ -e "$_arquivo3" ]; then
rm $_arquivo3
fi
if [ -e "$_arquivo4" ]; then
rm $_arquivo4
fi