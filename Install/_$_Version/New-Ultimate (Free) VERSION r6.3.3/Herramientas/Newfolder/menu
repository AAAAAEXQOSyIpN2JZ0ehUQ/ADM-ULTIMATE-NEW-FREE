#!/bin/bash
red=$(tput setaf 1)
gren=$(tput setaf 2)
yellow=$(tput setaf 3)
#Screen
SCPdir="/etc/new-adm" && [[ ! -d ${SCPdir} ]] && exit 1
SCPusr="${SCPdir}/ger-user" && [[ ! -d ${SCPusr} ]] && mkdir ${SCPusr}
SCPfrm="/etc/ger-frm" && [[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
SCPinst="/etc/ger-inst" && [[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
SCPidioma="${SCPdir}/idioma" && [[ ! -e ${SCPidioma} ]] && touch ${SCPidioma}
if [[ -e /etc/bash.bashrc-bakup ]]; then
AutoRun="\033[1;32m[on]"
elif [[ -e /etc/bash.bashrc ]]; then
AutoRun="\033[1;31m[off]"
fi
# Funcoes Globais
msg () {
BRAN='\033[1;37m' && VERMELHO='\e[31m'
VERDE='\e[32m' && AMARELO='\e[33m'
AZUL='\e[34m' && MAGENTA='\e[35m'
MAG='\033[1;36m' && NEGRITO='\e[1m'
SEMCOR='\e[0m'
 case $1 in
  -ne)cor="${VERMELHO}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}";;
  -ama)cor="${AMARELO}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -verm)cor="${AMARELO}${NEGRITO}[!] ${VERMELHO}" && echo -e "${cor}${2}${SEMCOR}";;
  -azu)cor="${MAG}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -verd)cor="${VERDE}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -bra)cor="${BRAN}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  "-bar2"|"-bar")cor="${AZUL}======================================================" && echo -e "${SEMCOR}${cor}${SEMCOR}";;
 esac
}
fun_trans () {
declare -A texto
[[ ! -e /etc/texto-adm ]] && touch /etc/texto-adm
source /etc/texto-adm
if [[ -z $(echo ${texto[$2]}) ]]; then
 retorno="$(source trans -b pt:$1 "$2"|sed -e 's/[^a-z0-9 -]//ig')"
 if [[ $retorno = "" ]];then
 retorno="$(source trans -e bing -b pt:$1 "$2"|sed -e 's/[^a-z0-9 -]//ig')"
 fi
 if [[ $retorno = "" ]];then 
 retorno="$(source trans -e yandex -b pt:$1 "$2"|sed -e 's/[^a-z0-9 -]//ig')"
 fi
 echo "texto[$2]='$retorno'"  >> /etc/texto-adm
 echo "$retorno"
else
 echo "${texto[$2]}"
fi
}
atualiza_fun () {
cd $HOME
tput cuu1 && tput dl1
msg -bar2
msg -ama "$(fun_trans ${id} "ATUALIZADOR ADM SCRIPTS"): \033[1;31m[NEW-ULTIMATE]"
msg -verm "$(fun_trans ${id} "Ao Prosseguirmos Dados como Tempo de uso Serao Perdidos"): "
msg -bar2
while [[ $Key != @(s|S|y|Y|n|N) ]]; do
msg -ne "$(fun_trans ${id} "Concorda")? [S/N]: " && read Key
tput cuu1 && tput dl1
done
if [[ $Key = @(s|S|y|Y) ]]; then
msg -verm "$(fun_trans ${id} "Perfeito Iniciando Procedimento"): "
wget -O $HOME/instalar.sh https://www.dropbox.com/s/ubaf4rinem1x019/instala.sh &>/dev/null
chmod +x $HOME/instalar.s*
$HOME/instalar.sh "${id}"
else
msg -verm "$(fun_trans ${id} "Procedimento Cancelado"): "
msg -bar2
fi
}
funcao_idioma () {
tput cuu1 && tput dl1
msg -bar2
declare -A idioma=( [1]="en English" [2]="fr Franch" [3]="de German" [4]="it Italian" [5]="pl Polish" [6]="pt Portuguese" [7]="es Spanish" [8]="tr Turkish" )
for ((i=1; i<=12; i++)); do
valor1="$(echo ${idioma[$i]}|cut -d' ' -f2)"
[[ -z $valor1 ]] && break
valor1="\033[1;32m[$i] > \033[1;33m$valor1"
    while [[ ${#valor1} -lt 37 ]]; do
       valor1=$valor1" "
    done
echo -ne "$valor1"
let i++
valor2="$(echo ${idioma[$i]}|cut -d' ' -f2)"
[[ -z $valor2 ]] && {
   echo -e " "
   break
   }
valor2="\033[1;32m[$i] > \033[1;33m$valor2"
     while [[ ${#valor2} -lt 37 ]]; do
        valor2=$valor2" "
     done
echo -ne "$valor2"
let i++
valor3="$(echo ${idioma[$i]}|cut -d' ' -f2)"
[[ -z $valor3 ]] && {
   echo -e " "
   break
   }
valor3="\033[1;32m[$i] > \033[1;33m$valor3"
     while [[ ${#valor3} -lt 37 ]]; do
        valor3=$valor3" "
     done
echo -e "$valor3"
done
msg -bar2
unset selection
while [[ ${selection} != @([1-8]) ]]; do
echo -ne "\033[1;37m${txt[7]}: " && read selection
tput cuu1 && tput dl1
done
[[ -e /etc/texto-adm ]] && rm /etc/texto-adm
echo "$(echo ${idioma[$selection]}|cut -d' ' -f1)" > ${SCPidioma}
}
mine_port () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
i=0
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e ${portas[@]}|grep "$var1 $var2")" ]] || {
    portas[$i]="$var1 $var2"
    let i++
    }
done <<< "$portas_var"
for((i=0; i<=${#portas[@]}; i++)); do
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && break
texto="\033[1;31m${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -ne "${texto}"
let i++
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "
   break
   }
texto="\033[1;31m${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -ne "${texto}"
let i++
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "
   break
   }
texto="\033[1;31m${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -e "${texto}"
done
[[ $(dpkg --get-selections|grep -w "gawk"|head -1) ]] || apt-get install gawk -y &>/dev/null
[[ ! -e /usr/bin/trans ]] && wget -O /usr/bin/trans http://git.io/trans &> /dev/null
}
ofus () {
unset txtofus
number=$(expr length $1)
for((i=1; i<$number+1; i++)); do
txt[$i]=$(echo "$1" | cut -b $i)
case ${txt[$i]} in
".")txt[$i]="+";;
"+")txt[$i]=".";;
"1")txt[$i]="@";;
"@")txt[$i]="1";;
"2")txt[$i]="?";;
"?")txt[$i]="2";;
"3")txt[$i]="%";;
"%")txt[$i]="3";;
"/")txt[$i]="K";;
"K")txt[$i]="/";;
esac
txtofus+="${txt[$i]}"
done
echo "$txtofus" | rev
}
remove_ferramenta () {
echo -e "\033[1;31m$(fun_trans ${id} "ATENCAO"): "
echo -e "\033[1;33m$(fun_trans ${id} "Esse Processo Nao Podera ser Desfeito")"
echo -e "\033[1;33m$(fun_trans ${id} "Selecione a Ferramenta que Deseja Remover")"
msg -bar2
i=0
for arqs in $(ls ${SCPfrm}); do
ferramentas_data "$arqs" "$i" && {
  script[$i]="$arqs"
  let i++
  }
done
echo -ne "\033[1;32m [0] > " && msg -bra "$(fun_trans ${id} "VOLTAR")"
script[0]="voltar"
msg -bar2
selection=999
while [[ -z ${script[$selection]} ]]; do
echo -ne "\033[1;37m${txt[7]}: " && read selection
tput cuu1 && tput dl1
done
[[ -e "${SCPfrm}/${script[$selection]}" ]] && rm ${SCPfrm}/${script[$selection]} || return
}
agregar_ferramenta () {
tput cuu1 && tput dl1
msg -bar2
unset Key
echo -e "\033[1;31m$(fun_trans ${id} "ATENCAO"): "
echo -e "\033[1;33m$(fun_trans ${id} "nao introduza uma key de atualizacao aqui")"
echo -e "\033[1;37m$(fun_trans ${id} "Digite Chave Para o Novo Recurso") "
msg -bar2
while [[ -z $Key ]]; do
echo -ne "[Key/Link]: " && read Key
tput cuu1 && tput dl1
done
echo -ne "\033[1;37m$(fun_trans ${id} "Verificando key"): "
cd ${SCPfrm}
curl "$Key" &> /dev/null
if [[ $? = "0" ]]; then
echo -e "\033[1;32m $(fun_trans ${id} "Link Valido")"
REC=$(echo $Key|awk -F"/" '{print $NF}')
echo -ne "\033[1;33m$(fun_trans ${id} "Recebendo Recurso"): \033[1;31m[$REC]"
wget -O ${SCPfrm}/${REC} $Key &>/dev/null && echo -e "\033[1;31m- \033[1;32m$(fun_trans ${id} "Recebido")" && chmod +x ${SCPfrm}/${REC} || echo -e "\033[1;31m- \033[1;31m$(fun_trans ${id} "Erro ao Receber")"
else
wget $(ofus "$Key") >/dev/null 2>&1 && echo -e "\033[1;32m $(fun_trans ${id} "Key Valida")" || {
    msg -verm "$(fun_trans ${id} "Chave invalida")"
    msg -bar2
    return 0   
    }
fi
IP=$(ofus "$Key" | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
sleep 1s
[[ -e ${SCPfrm}/lista-arq ]] && {
  if [[ $(cat ${SCPfrm}/lista-arq) = "KEY DE INSTALAÇAO!" ]]; then
  echo -e "\033[1;33m$(fun_trans ${id} "CHAVE DE INSTALACAO NAO DEVE SER USADA AQUI")"
  msg -bar2
  rm ${SCPfrm}/lista-arq
  return 1
  fi
  if [[ $(cat ${SCPfrm}/lista-arq) = "KEY INVALIDA!" ]]; then
  echo -e "\033[1;33m$(fun_trans ${id} "CHAVE INVALIDA")"
  msg -bar2
  rm ${SCPfrm}/lista-arq
  return 1
  fi
  REQUEST=$(ofus "$Key" |cut -d'/' -f2)
  for arqx in $(cat ${SCPfrm}/lista-arq); do
  echo -ne "\033[1;33m$(fun_trans ${id} "Recebendo Recurso"): \033[1;31m[$arqx] "
  wget -O ${SCPfrm}/${arqx} ${IP}:81/${REQUEST}/${arqx} > /dev/null 2>&1 && echo -e "\033[1;31m- \033[1;32m$(fun_trans ${id} "Recebido")" && chmod +x ${SCPfrm}/${arqx} || echo -e "\033[1;31m- \033[1;31m$(fun_trans ${id} "Erro ao Receber")"
  sleep 1s
  done
  rm ${SCPfrm}/lista-arq
  msg -bar2
  } 
}
limpar_caches () {
(
VE="\033[1;33m" && MA="\033[1;31m" && DE="\033[1;32m"
while [[ ! -e /tmp/abc ]]; do
A+="#"
echo -e "${VE}[${MA}${A}${VE}]" >&2
sleep 0.3s
tput cuu1 && tput dl1
done
echo -e "${VE}[${MA}${A}${VE}] - ${DE}[100%]" >&2
rm /tmp/abc
) &
echo 3 > /proc/sys/vm/drop_caches &>/dev/null
sleep 1s
sysctl -w vm.drop_caches=3 &>/dev/null
apt-get autoclean -y &>/dev/null
sleep 1s
apt-get clean -y &>/dev/null
rm /tmp/* &>/dev/null
touch /tmp/abc
sleep 0.5s
msg -bar
msg -ama "$(fun_trans ${id} "PROCESSO CONCLUIDO")"
msg -bar
}
fun_autorun () {
if [[ -e /etc/bash.bashrc-bakup ]]; then
mv -f /etc/bash.bashrc-bakup /etc/bash.bashrc
cat /etc/bash.bashrc | grep -v "/etc/new-adm/menu" > /tmp/bash
mv -f /tmp/bash /etc/bash.bashrc
msg -ama "$(fun_trans ${id} "REMOVIDO COM SUCESSO")"
msg -bar
elif [[ -e /etc/bash.bashrc ]]; then
cat /etc/bash.bashrc|grep -v /bin/adm > /etc/bash.bashrc.2
echo '/etc/new-adm/menu' >> /etc/bash.bashrc.2
cp /etc/bash.bashrc /etc/bash.bashrc-bakup
mv -f /etc/bash.bashrc.2 /etc/bash.bashrc
msg -ama "$(fun_trans ${id} "AUTO INICIALIZAR ADICIONADO")"
msg -bar
fi
}
[[ $(dpkg --get-selections|grep -w "gawk"|head -1) ]] || apt-get install gawk -y &>/dev/null
[[ ! -e /usr/bin/trans ]] && wget -O /usr/bin/trans http://git.io/trans &> /dev/null
meu_ip () {
if [[ -e /etc/MEUIPADM ]]; then
echo "$(cat /etc/MEUIPADM)"
else
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && echo "$MEU_IP2" || echo "$MEU_IP"
echo "$MEU_IP2" > /etc/MEUIPADM
fi
}
os_system () {
system=$(echo $(cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/      //'))
echo $system|awk '{print $1, $2}'
}
remove_script () {
msg -ama "$(fun_trans ${id} "CONFIRMA REMOCAO TOTAL DOS SCRIPTS")?"
msg -bar
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
#Limpiar Texto
[[ -e /etc/texto-gestor ]] && rm -rf /etc/texto-gestor
[[ -e /etc/texto-adm ]] && rm -rf /etc/texto-adm
[[ -e /etc/texto-fai2ban ]] && rm -rf /etc/texto-fai2ban
[[ -e /etc/texto-ssl ]] && rm -rf /etc/texto-ssl
[[ -e /etc/texto-squid ]] && rm -rf /etc/texto-squid
[[ -e /etc/texto-user ]] && rm -rf /etc/texto-user
[[ -e /etc/texto-bot ]] && rm -rf /etc/texto-bot
[[ -e /etc/texto-apache ]] && rm -rf /etc/texto-apache
[[ -e /etc/texto-dados ]] && rm -rf /etc/texto-dados
[[ -e /etc/texto-paysnd ]] && rm -rf /etc/texto-paysnd
[[ -e /etc/texto-ports ]] && rm -rf /etc/texto-ports
[[ -e /etc/texto-ultra ]] && rm -rf /etc/texto-ultra
[[ -e /etc/texto-utils ]] && rm -rf /etc/texto-utils
[[ -e /etc/texto-dropbear ]] && rm -rf /etc/texto-dropbear
[[ -e /etc/texto-shadowsocks ]] && rm -rf /etc/texto-shadowsocks
[[ -e /etc/texto-open ]] && rm -rf /etc/texto-open
[[ -e /etc/texto-speed ]] && rm -rf /etc/texto-speed
[[ -e /etc/texto-sockspy ]] && rm -rf /etc/texto-sockspy
rm -rf ${SCPdir} &>/dev/null
rm -rf ${SCPusr} &>/dev/null
rm -rf ${SCPinst} &>/dev/null
rm -rf ${SCPfrm} &>/dev/null
[[ -e /bin/menu ]] && rm -rf /bin/menu
[[ -e /bin/adm ]] && rm -rf /bin/adm
[[ -e /usr/bin/adm ]] && rm -rf /usr/bin/adm
[[ -e /usr/bin/menu ]] && rm -rf /usr/bin/menu
[[ -e /bin/proxy.sh ]] && rm -rf /bin/proxy.sh
cd $HOME
fi
}
# Menu Ferramentas
systen_info () {
msg -ama "$(fun_trans ${id} "DETALHES DO SISTEMA")"
null="\033[1;31m"
msg -bar
if [ ! /proc/cpuinfo ]; then
msg -verm "$(fun_trans ${id} "Sistema Nao Suportado")" && msg -bar
return 1
fi
if [ ! /etc/issue.net ]; then
msg -verm "$(fun_trans ${id} "Sistema Nao Suportado")" && msg -bar
return 1
fi
if [ ! /proc/meminfo ]; then
msg -verm "$(fun_trans ${id} "Sistema Nao Suportado")" && msg -bar
return 1
fi
totalram=$(free | grep Mem | awk '{print $2}')
usedram=$(free | grep Mem | awk '{print $3}')
freeram=$(free | grep Mem | awk '{print $4}')
swapram=$(cat /proc/meminfo | grep SwapTotal | awk '{print $2}')
system=$(cat /etc/issue.net)
clock=$(lscpu | grep "CPU MHz" | awk '{print $3}')
based=$(cat /etc/*release | grep ID_LIKE | awk -F "=" '{print $2}')
processor=$(cat /proc/cpuinfo | grep "model name" | uniq | awk -F ":" '{print $2}')
cpus=$(cat /proc/cpuinfo | grep processor | wc -l)
[[ "$system" ]] && msg -ama "$(fun_trans ${id} "Sistema"): ${null}$system" || msg -ama "$(fun_trans ${id} "Sistema"): ${null}???"
[[ "$based" ]] && msg -ama "$(fun_trans ${id} "Baseado"): ${null}$based" || msg -ama "$(fun_trans ${id} "Baseado"): ${null}???"
[[ "$processor" ]] && msg -ama "$(fun_trans ${id} "Processador"): ${null}$processor x$cpus" || msg -ama "$(fun_trans ${id} "Processador"): ${null}???"
[[ "$clock" ]] && msg -ama "$(fun_trans ${id} "Frequecia de Operacao"): ${null}$clock MHz" || msg -ama "$(fun_trans ${id} "Frequecia de Operacao"): ${null}???"
msg -ama "$(fun_trans ${id} "Uso do Processador"): ${null}$(ps aux  | awk 'BEGIN { sum = 0 }  { sum += sprintf("%f",$3) }; END { printf " " "%.2f" "%%", sum}')"
msg -ama "$(fun_trans ${id} "Memoria Virtual Total"): ${null}$(($totalram / 1024))"
msg -ama "$(fun_trans ${id} "Memoria Virtual Em Uso"): ${null}$(($usedram / 1024))"
msg -ama "$(fun_trans ${id} "Memoria Virtual Livre"): ${null}$(($freeram / 1024))"
msg -ama "$(fun_trans ${id} "Memoria Virtual Swap"): ${null}$(($swapram / 1024))MB"
msg -ama "$(fun_trans ${id} "Tempo Online"): ${null}$(uptime)"
msg -ama "$(fun_trans ${id} "Nome Da Maquina"): ${null}$(hostname)"
msg -ama "$(fun_trans ${id} "Endereço Da Maquina"): ${null}$(ip addr | grep inet | grep -v inet6 | grep -v "host lo" | awk '{print $2}' | awk -F "/" '{print $1}')"
msg -ama "$(fun_trans ${id} "Versao do Kernel"): ${null}$(uname -r)"
msg -ama "$(fun_trans ${id} "Arquitetura"): ${null}$(uname -m)"
msg -bar
return 0
}
ferramentas_data () {
ofc="\033[0m${gren}(#OFC)"
dev="\033[0m${gren}(#DEV)"
case $1 in
"gestor.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "$(fun_trans ${id} "ADMINISTRADOR DE VPS") $ofc";;
"ports.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "$(fun_trans ${id} "SISTEMA DE PORTAS") $ofc";;
"fai2ban.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "$(fun_trans ${id} "FAIL2BAN PROTECAO") $ofc";;
"paysnd.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "$(fun_trans ${id} "PAYLOAD FORCA BRUTA") $ofc";;
"apacheon.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "$(fun_trans ${id} "COMPARTILHAR ARQUIVO ONLINE") $ofc";;
"utils.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "(Badvpn/tcpspeed/squidcache/torrent) $ofc";;
"dados.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "$(fun_trans ${id} "MONITOR DE CONSUMO") $ofc";;
"speed.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "$(fun_trans ${id} "TESTE DE VELOCIDADE") $ofc";;
"ultrahost")echo -ne "\033[1;32m [$2] > " && msg -azu "$(fun_trans ${id} "SCANNER DE SUBDOMINIO") $ofc";;
"ADMbot.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "$(fun_trans ${id} "BOT DE GERENCIAMENTO") TELEGRAN $ofc";;
"speedtest.py")return 1;;
*)echo -ne "\033[1;32m [$2] > " && msg -azu "${1^^} \033[1;33m($(fun_trans ${id} "Sem Descricao")!)";;
esac
}
ferramentas_fun () {
tput cuu1 && tput dl1
msg -bar2
msg -ama "$(fun_trans ${id} "MENU DE FERRAMENTAS")"
msg -bar2
i=1
for arqs in $(ls ${SCPfrm}); do
ferramentas_data "$arqs" "$i" && {
  script[$i]="$arqs"
  let i++
  }
done
echo -ne "\033[1;32m [$i] > " && msg -azu "$(fun_trans ${id} "DETALHES DO SISTEMA") $ofc"
script[$i]="systeminf"
let i++
echo -ne "\033[1;32m [$i] > " && msg -azu "$(fun_trans ${id} "LIMPAR CACHE SISTEMA") $ofc"
script[$i]="limpar"
let i++
echo -ne "\033[1;32m [$i] > \033[1;33m[!] " && msg -verd "$(fun_trans ${id} "ADICIONAR FERRAMENTAS")"
script[$i]="agregar"
let i++
echo -ne "\033[1;32m [$i] > \033[1;33m" && msg -verm "$(fun_trans ${id} "REMOVER FERRAMENTAS")"
script[$i]="remove"
echo -ne "\033[1;32m [0] > " && msg -bra "$(fun_trans ${id} "VOLTAR")"
script[0]="voltar"
msg -bar2
selection=999
while [[ -z ${script[$selection]} ]]; do
echo -ne "\033[1;37m${txt[7]}: " && read selection
tput cuu1 && tput dl1
done
[[ -e "${SCPfrm}/${script[$selection]}" ]] && {
  ${SCPfrm}/${script[$selection]} ${id}
  } || {
  case ${script[$selection]} in
  "agregar")agregar_ferramenta;;
  "remove")remove_ferramenta;;
  "limpar")limpar_caches;;
  "systeminf")systen_info;;
  *)return 0;;
  esac
  }  
}
# Menu Instalação
pid_inst () {
[[ $1 = "" ]] && echo -e "\033[1;31moff" && return 0
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
i=0
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e ${portas[@]}|grep "$var1 $var2")" ]] || {
    portas[$i]="$var1 $var2\n"
    let i++
    }
done <<< "$portas_var"
[[ $(echo "${portas[@]}"|grep "$1") ]] && echo -e "\033[1;32mon" || echo -e "\033[1;31moff"
}
inst_data () {
case $1 in
"openssh.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "OPENSSH $(pid_inst sshd)";;
"squid.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "SQUID $(pid_inst squid)";;
"dropbear.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "DROPBEAR $(pid_inst dropbear)";;
"openvpn.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "OPENVPN $(pid_inst openvpn)";;
"ssl.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "SSL $(pid_inst stunnel4)";;
"shadowsocks.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "SHADOWSOCKS $(pid_inst ssserver)";;
"sockspy.sh")echo -ne "\033[1;32m [$2] > " && msg -azu "SOCKS PYTHON $(pid_inst python)";;
*)return 1;;
esac
}
menu_inst () {
menuTXT="$(fun_trans ${id} "VOLTAR")"
msg -ama "$(fun_trans ${id} "MENU DE INSTALACAO")"
msg -bar
i=1
for arqs in $(ls ${SCPinst}); do
inst_data "$arqs" "$i" && {
  script[$i]="$arqs"
  let i++
  }
done
echo -ne "\033[1;32m [0] > " && msg -bra "$menuTXT"
msg -bar
script[0]="voltar"
selection=999
while [[ -z ${script[$selection]} ]]; do
echo -ne "\033[1;37m${txt[7]}: " && read selection
tput cuu1 && tput dl1
done
[[ -e "${SCPinst}/${script[$selection]}" ]] && {
  ${SCPinst}/${script[$selection]} ${id}
  } || return 0
}
# Execução Menu
textos_fun () {
id="$1"
[[ -e /tmp/txt ]] && rm /tmp/txt
echo "txt[1]='$(fun_trans ${id} "GERENCIAR USUARIOS")'" >> /tmp/txt &
echo "txt[2]='$(fun_trans ${id} "FERRAMENTAS")'" >> /tmp/txt &
echo "txt[3]='$(fun_trans ${id} "TROCAR IDIOMA")'" >> /tmp/txt &
echo "txt[4]='$(fun_trans ${id} "ATUALIZAR")'" >> /tmp/txt &
echo "txt[5]='$(fun_trans ${id} "DESINSTALAR")'" >> /tmp/txt &
echo "txt[6]='$(fun_trans ${id} "AUTO INICIALIZACAO")'" >> /tmp/txt &
echo "txt[7]='$(fun_trans ${id} "Selecione a Opcao")'" >> /tmp/txt &
echo "txt[8]='$(fun_trans ${id} "Enter Para Continuar")'" >> /tmp/txt &
echo "txt[9]='$(fun_trans ${id} "GERENCIADOR")'" >> /tmp/txt &
echo "txt[10]='$(fun_trans ${id} "PORTAS ATIVAS E INFORMACOES DO SERVIDOR")'" >> /tmp/txt &
echo "txt[11]='$(fun_trans ${id} "MENU DE INSTALACOES")'" >> /tmp/txt &
echo "txt[12]='$(fun_trans ${id} "SAIR DO SCRIPT")'" >> /tmp/txt &
while [[ ! -e /tmp/txt || $(cat /tmp/txt|wc -l) -lt "12"  ]]; do
continue
done
source /tmp/txt && rm /tmp/txt
}
[[ ! -e ${SCPidioma} ]] && touch ${SCPidioma}
idioma=$(cat ${SCPidioma})
[[ -z ${idioma} ]] && textos_fun pt || textos_fun ${idioma}
clear
msg -bar
msg -ama "${txt[10]}"
msg -bar
mine_port
msg -ne "OS: " && echo -ne "$(os_system)  "
msg -ne "IP: " && echo -e "$(meu_ip)"
[[ -e ${SCPdir}/USRonlines ]] && msg -ne "ON: " && echo -ne "\033[1;32m$(cat ${SCPdir}/USRonlines) "
[[ -e ${SCPdir}/USRexpired ]] && msg -ne "EXPIRED: " && echo -e "\033[1;32m$(cat ${SCPdir}/USRexpired)"
[[ -e ${SCPdir}/message.txt ]] && msg -bar && msg -bra "MESSAGE: $(cat ${SCPdir}/message.txt)"
[[ -e ${SCPdir}/key.txt ]] && msg -bar && msg -bra "LASTKEY: $(cat ${SCPdir}/key.txt)"
msg -bar
msg -ama "${txt[9]} \033[1;31m[\033[1;32m NEW-ULTIMATE \033[1;31m]"
msg -bar
echo -ne "\033[1;32m [1] > " && msg -azu "${txt[1]}"
echo -ne "\033[1;32m [2] > " && msg -azu "${txt[2]}"
echo -ne "\033[1;32m [3] > " && msg -azu "${txt[3]}"
echo -ne "\033[1;32m [4] > \033[1;33m[!] " && msg -verd "${txt[4]}"
echo -ne "\033[1;32m [5] > " && msg -verm "${txt[5]}"
echo -ne "\033[1;32m [6] > " && msg -azu "${txt[6]} $AutoRun"
echo -ne "\033[1;32m [7] > " && msg -azu "${txt[11]}"
echo -ne "\033[1;32m [0] > " && msg -bra "${txt[12]}"
msg -bar
unset selection
while [[ ${selection} != @([0-7]) ]]; do
echo -ne "\033[1;37m${txt[7]}: " && read selection
tput cuu1 && tput dl1
done
if [[ ${selection} = "1" ]]; then
${SCPusr}/usercodes "${idioma}"
elif [[ ${selection} = "2" ]]; then
ferramentas_fun
elif [[ ${selection} = "3" ]]; then
funcao_idioma
elif [[ ${selection} = "4" ]]; then
atualiza_fun
elif [[ ${selection} = "5" ]]; then
remove_script
elif [[ ${selection} = "6" ]]; then
fun_autorun
elif [[ ${selection} = "7" ]]; then
menu_inst
elif [[ ${selection} = "0" ]]; then
cd $HOME
exit 0
fi
msg -ne "${txt[8]}" && read enter &&
source menu
