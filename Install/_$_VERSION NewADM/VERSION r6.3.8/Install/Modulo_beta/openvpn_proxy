#!/bin/bash

cor[1]="\033[1;33m"
cor[2]="\033[1;32m"
cor[3]="\033[1;31m"
cor[4]="\033[1;36m"
cor[5]="\033[0m"

minhas_portas () {
sleep 3s
portas_var="/tmp/portas"
porta_var="/tmp/portas2"
lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN" > $portas_var
while read port; do
var1=$(echo $port | awk '{print $1}')
var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
if [ ! -e "$porta_var" ]; then
echo -e "$var1 $var2" > $porta_var
fi
if [ "$(cat $porta_var | grep "$var1" | grep "$var2")" = "" ]; then
echo -e "$var1 $var2" >> $porta_var
fi
done < $portas_var
i=1
while read pts; do
if [ "$pts" = "" ]; then
break
fi
service_porta[$i]=$(echo "$pts" | awk '{print $2}')
service_serv[$i]=$(echo "$pts" | awk '{print $1}')
echo -e "\033[1;37m [Porta $i]\033[1;37m Serviço: \033[1;31m${service_serv[$i]} \033[1;37mPorta: \033[1;31m${service_porta[$i]}"
i=$(($i+1))
done < $porta_var
rm $portas_var
rm $porta_var
}

fun_ip () {
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
if [[ "$MEU_IP" != "$MEU_IP2" ]]; then
MEU_IP="$MEU_IP2"
 else
MEU_IP="$MEU_IP"
fi
}

fun_eth () {
eth=$(ifconfig | grep -v inet6 | grep -v lo | grep -v 127.0.0.1 | grep "encap:Ethernet" | awk '{print $1}')
if [ "$eth" != "" ]; then
 echo -e "${cor[1]}Aplicar Sistema Para Melhorar Pacotes Ssh?"
 echo -e "${cor[3]}Opção Para Usuarios Avançados"
 read -p "[s/n]: " s_ssh
 if [[ "$s_ssh" = "s" || "$s_ssh" = "S" ]]; then
 echo -e "${cor[1]}Correção de problemas de pacotes no SSH..."
 echo -e "Qual A Taxa RX"
 read -p "[ 1 - 999999999 ]: " rx
 if [ "$rx" = "" ]; then
 rx="999999999"
 fi
 echo -e "Qual A Taxa TX"
 read -p "[ 1 - 999999999 ]: " tx
 if [ "$tx" = "" ]; then
 tx="999999999"
 fi
apt-get install ethtool -y > /dev/null 2>&1
ethtool -G $eth rx $rx tx $tx > /dev/null 2>&1
 fi
fi
}

ver_porta () {
unset pot
unset pt
pt="$1"
while true; do
teste=$(lsof -i tcp:$pt -P -n)
if [ "$teste" != "" ]; then
 if [ "$1" = "80" ]; then
 pt=$((($RANDOM %20) + 81))
 teste=$(lsof -i tcp:$pt -P -n)
 elif [ "$1" = "8080" ]; then
 pt=$((($RANDOM %20) + 8079))
 teste=$(lsof -i tcp:$pt -P -n)
 elif [ "$1" = "8799" ]; then
 pt=$((($RANDOM %20) + 8770))
 teste=$(lsof -i tcp:$pt -P -n)
 elif [ "$1" = "3128" ]; then
 pt=$((($RANDOM %20) + 3111))
 teste=$(lsof -i tcp:$pt -P -n)
 else
 pt=$((($RANDOM %20) + 100))
 teste=$(lsof -i tcp:$pt -P -n)
 fi
fi
if [ "$teste" = "" ]; then
pot="$pt"
break
fi
done
}

instalar_squid () {
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
echo -e "\033[1;32mSQUID INSTALER ADM-ULTIMATE"
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
ver_porta 80
porta[1]="$pot"
ver_porta 8080
porta[2]="$pot"
ver_porta 8799
porta[3]="$pot"
ver_porta 3128
porta[4]="$pot"

fun_ip
read -p "Digite seu IP: " -e -i $MEU_IP ip
apt-get update -y > /dev/null 2>&1
apt-get upgrade -y > /dev/null 2>&1
apt-get install squid3 -y > /dev/null 2>&1
echo -e "INICIANDO INSTALAÇAO"

cp /etc/ssh/sshd_config /etc/ssh/sshd_back
cat /etc/ssh/sshd_config | grep -v "Port 443" > /etc/ssh/a
mv -f /etc/ssh/a /etc/ssh/sshd_config

if [[ -e /etc/squid/squid.conf ]]; then
var_squid="/etc/squid/squid.conf"
elif [[ -e /etc/squid3/squid.conf ]]; then
var_squid="/etc/squid3/squid.conf"
fi

echo -e ".bookclaro.com.br/\n.claro.com.ar/\n.claro.com.br/\n.claro.com.co/\n.claro.com.ec/\n.claro.com.gt/\n.claro.com.ni/\n.claro.com.pe/\n.claro.com.sv/\n.claro.cr/\n.clarocurtas.com.br/\n.claroideas.com/\n.claroideias.com.br/\n.claromusica.com/\n.clarosomdechamada.com.br/\n.clarovideo.com/\n.facebook.net/\n.facebook.com/\n.netclaro.com.br/\n.oi.com.br/\n.oimusica.com.br/\n.speedtest.net/\n.tim.com.br/\n.timanamaria.com.br/\n.vivo.com.br/\n.rdio.com/\n.compute-1.amazonaws.com/\n.portalrecarga.vivo.com.br/\n.vivo.ddivulga.com/" > /etc/payloads

##ProxySystem##
echo -e "\033[1;32m Agora Escolha Uma Conf Para Seu Proxy"
echo -e "|1|• Basico"
echo -e "|2|• Completo - OPCAO PARA USUARIOS AVANÇADOS"
read -p "[ 1 | 2 ]: " proxy_opt
if [ "$proxy_opt" = "2" ]; then
echo "#ConfiguracaoSquiD
acl url1 dstdomain -i $ip
acl url2 dstdomain -i 127.0.0.1
acl url3 url_regex -i '/etc/payloads'
acl url4 dstdomain -i localhost
acl accept dstdomain -i GET
acl accept dstdomain -i POST
acl accept dstdomain -i OPTIONS
acl accept dstdomain -i CONNECT
acl accept dstdomain -i PUT
acl HEAD dstdomain -i HEAD
acl accept dstdomain -i TRACE
acl accept dstdomain -i OPTIONS
acl accept dstdomain -i PATCH
acl accept dstdomain -i PROPATCH
acl accept dstdomain -i DELETE
acl accept dstdomain -i REQUEST
acl accept dstdomain -i METHOD
acl accept dstdomain -i NETDATA
acl accept dstdomain -i MOVE
acl all src 0.0.0.0/0
http_access allow url1
http_access allow url2
http_access allow url3
http_access allow url4
http_access allow accept
http_access allow HEAD
http_access deny all

# Request Headers Forcing

request_header_access Allow allow all
request_header_access Authorization allow all
request_header_access WWW-Authenticate allow all
request_header_access Proxy-Authorization allow all
request_header_access Proxy-Authenticate allow all
request_header_access Cache-Control allow all
request_header_access Content-Encoding allow all
request_header_access Content-Length allow all
request_header_access Content-Type allow all
request_header_access Date allow all
request_header_access Expires allow all
request_header_access Host allow all
request_header_access If-Modified-Since allow all
request_header_access Last-Modified allow all
request_header_access Location allow all
request_header_access Pragma allow all
request_header_access Accept allow all
request_header_access Accept-Charset allow all
request_header_access Accept-Encoding allow all
request_header_access Accept-Language allow all
request_header_access Content-Language allow all
request_header_access Mime-Version allow all
request_header_access Retry-After allow all
request_header_access Title allow all
request_header_access Connection allow all
request_header_access Proxy-Connection allow all
request_header_access User-Agent allow all
request_header_access Cookie allow all
request_header_access All deny all

# Response Headers Spoofing

reply_header_access Via deny all
reply_header_access X-Cache deny all
reply_header_access X-Cache-Lookup deny all

#portas
http_port ${porta[1]}
http_port ${porta[2]}
http_port ${porta[3]}
http_port ${porta[4]}

#nome
visible_hostname ADM-MANAGER

via off
forwarded_for off
pipeline_prefetch off" > $var_squid
 else
echo "#ConfiguracaoSquiD
acl url1 dstdomain -i $ip
acl url2 dstdomain -i 127.0.0.1
acl url3 url_regex -i '/etc/payloads'
acl url4 dstdomain -i localhost
acl all src 0.0.0.0/0
http_access allow url1
http_access allow url2
http_access allow url3
http_access allow url4

#portas
http_port ${porta[1]}
http_port ${porta[2]}
http_port ${porta[3]}
http_port ${porta[4]}

#nome
visible_hostname ADM-MANAGER

via off
forwarded_for off
pipeline_prefetch off" > $var_squid
fi

fun_eth

echo -e "REINICIANDO SERVIÇOS"
squid3 -k reconfigure > /dev/null 2>&1
service ssh restart > /dev/null 2>&1
service squid3 restart > /dev/null 2>&1
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
echo -e "\033[1;32mSQUID CONFIGURADO"
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
}

remover_ovpn () {
read -p "Você deseja remover OpenVPN? [y/n]: " -e -i n REMOVE
 if [[ "$REMOVE" = 'y' ]]; then
PORT=$(grep '^port ' /etc/openvpn/server.conf | cut -d " " -f 2)
PROTOCOL=$(grep '^proto ' /etc/openvpn/server.conf | cut -d " " -f 2)
IP=$(grep 'iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to ' $RCLOCAL | cut -d " " -f 11)
  if pgrep firewalld; then
# Using both permanent and not permanent rules to avoid a firewalld reload.
firewall-cmd --zone=public --remove-port=$PORT/$PROTOCOL
firewall-cmd --zone=trusted --remove-source=10.8.0.0/24
firewall-cmd --permanent --zone=public --remove-port=$PORT/$PROTOCOL
firewall-cmd --permanent --zone=trusted --remove-source=10.8.0.0/24
   fi
   if iptables -L -n | grep -qE 'REJECT|DROP|ACCEPT'; then
iptables -D INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
iptables -D FORWARD -s 10.8.0.0/24 -j ACCEPT
iptables -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
sed -i "/iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT/d" $RCLOCAL
sed -i "/iptables -I FORWARD -s 10.8.0.0\/24 -j ACCEPT/d" $RCLOCAL
sed -i "/iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT/d" $RCLOCAL
   fi
iptables -t nat -D POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP
sed -i '/iptables -t nat -A POSTROUTING -s 10.8.0.0\/24 -j SNAT --to /d' $RCLOCAL
   if hash sestatus 2>/dev/null; then
    if sestatus | grep "Current mode" | grep -qs "enforcing"; then
     if [[ "$PORT" != '1194' || "$PROTOCOL" = 'tcp' ]]; then
semanage port -d -t openvpn_port_t -p $PROTOCOL $PORT
   	fi
   fi
 fi
 if [[ "$OS" = 'debian' ]]; then
apt-get remove --purge -y openvpn openvpn-blacklist
else
yum remove openvpn -y
 fi
tuns=$(cat /etc/modules | grep -v tun)
echo "$tuns" > /etc/modules
echo tun >> /etc/modules
rm -rf /etc/openvpn/server.conf
rm -rf /usr/share/doc/openvpn*
echo ""
echo "OpenVPN removido!"
exit
else
echo ""
echo "Remoção abordada!"
fi
exit
}

ver_porta () {
porta_teste="$1"
unset varpt
if [ "$(lsof -i tcp:$porta_teste -P -n)" != "" ]; then
echo -e "\033[1;31m Porta $porta_teste Já Esta Em Uso!"
return 1
else
echo -e "\033[1;32m Porta $porta_teste ok!"
return 0
fi
}

instalar_openvpn () {
while true; do
echo -e "\033[1;33mOPENVPN NAO ESTA INSTALADO, DESEJA CONTINUAR?"
echo -ne "\033[0m"
read -p "[s/n]: " simnaoseila
case $simnaoseila in
(n|N)
echo -e "\033[1;31mABORTANDO INSTALACAO\033[0m"
break
return
;;
(s|S)
break
clear
;;
esac
done
echo -e "\033[1;31m"
echo "Responda as perguntas para iniciar a instalação"
echo "Responda corretamente"
echo ""
echo -e "\033[1;33mPrimeiro precisaremos do ip de sua maquina,este ip está correto ?\033[0m"
read -p "IP address: " -e -i $IP IP
echo ""
echo -e "\033[1;31mQual protocolo você deseja para as conexões OPENVPN ?"
echo -e "\033[1;33m   1) UDP"
echo -e "   2) TCP (Recomendado)"
echo -e "\033[0m"
	read -p "Protocol [1-2]: " PROTOCOL
	case $PROTOCOL in
		1) 
		PROTOCOL=udp
		;;
		2) 
		PROTOCOL=tcp
		;;
     *)
     PROTOCOL=tcp
     ;;
esac
echo ""
while true; do
echo -e "${cor[4]}=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠=≠"
echo -e "\033[1;33mQual porta você deseja usar ?\033[0m"
	read -p "Port: " -e -i 1194 pt
	echo ""
echo -e "\033[1;31mVerificando Porta...\033[0m"
ver_porta $pt
if [ "$?" = "0" ]; then
break
fi
done

PORT="$pt"
echo -e "\033[1;33m
Qual DNS você deseja usar ?
\033[1;31m  1)\033[1;33m Sistema(Recomendado)
\033[1;31m  2)\033[1;33m Google
\033[1;31m  3)\033[1;33m OpenDNS
\033[1;31m  4)\033[1;33m NTT
\033[1;31m  5)\033[1;33m Level 3
\033[1;31m  6)\033[1;33m Verisign\033[0m"
read -p "DNS [1-6]: " denesi
if [ "$denesi" = "1" ]; then
DNS="1"
elif [ "$denesi" = "2" ]; then
DNS="2"
elif [ "$denesi" = "3" ]; then
DNS="3"
elif [ "$denesi" = "4" ]; then
DNS="4"
elif [ "$denesi" = "5" ]; then
DNS="5"
elif [ "$denesi" = "6" ]; then
DNS="6"
else
DNS="1"
fi
echo ""
	echo "Okay, você está pronto para executar o openvpn "
	read -n1 -r -p "Pressione uma tecla para continuar..."
	if [[ "$OS" = 'debian' ]]; then
		apt-get upgrade
		apt-get install openvpn iptables openssl ca-certificates -y
	else
		# Else, the distro is CentOS
		yum install epel-release -y
		yum install openvpn iptables openssl wget ca-certificates -y
	fi
	# An old version of easy-rsa was available by default in some openvpn packages
	if [[ -d /etc/openvpn/easy-rsa/ ]]; then
		rm -rf /etc/openvpn/easy-rsa/
	fi
	# Adquirindo easy-rsa
	wget -O ~/EasyRSA-3.0.1.tgz "https://www.dropbox.com/s/zun84tks22iw8y8/EasyRSA-3.0.1.tgz?dl=0"
	tar xzf ~/EasyRSA-3.0.1.tgz -C ~/
	mv ~/EasyRSA-3.0.1/ /etc/openvpn/
	mv /etc/openvpn/EasyRSA-3.0.1/ /etc/openvpn/easy-rsa/
	chown -R root:root /etc/openvpn/easy-rsa/
	rm -rf ~/EasyRSA-3.0.1.tgz
	cd /etc/openvpn/easy-rsa/
	# Create the PKI, set up the CA, the DH params and the server + client certificates
	./easyrsa init-pki
	./easyrsa --batch build-ca nopass
	./easyrsa gen-dh
	./easyrsa build-server-full server nopass
	./easyrsa build-client-full admpro nopass
	./easyrsa gen-crl
	# Move the stuff we need
	cp pki/ca.crt pki/private/ca.key pki/dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn
	# CRL is read with each client connection, when OpenVPN is dropped to nobody
	chown nobody:$GROUPNAME /etc/openvpn/crl.pem
	# Generando key for tls-auth
	openvpn --genkey --secret /etc/openvpn/ta.key
  # Generando server.conf
echo "port $PORT
proto $PROTOCOL
dev tun
sndbuf 0
rcvbuf 0
ca ca.crt
cert server.crt
key server.key
dh dh.pem
tls-auth ta.key 0
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt" > /etc/openvpn/server.conf
 echo 'tun' >> /etc/modules
 echo 'push "redirect-gateway def1 bypass-dhcp"' >> /etc/openvpn/server.conf
	# DNS
	case $DNS in
		1) 
		# Obtain the resolvers from resolv.conf and use them for OpenVPN
		grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read line; do
			echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server.conf
		done
		;;
		2) 
		echo 'push "dhcp-option DNS 8.8.8.8"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 8.8.4.4"' >> /etc/openvpn/server.conf
		;;
		3)
		echo 'push "dhcp-option DNS 208.67.222.222"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 208.67.220.220"' >> /etc/openvpn/server.conf
		;;
		4) 
		echo 'push "dhcp-option DNS 129.250.35.250"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 129.250.35.251"' >> /etc/openvpn/server.conf
		;;
		5) 
		echo 'push "dhcp-option DNS 209.244.0.4"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 209.244.0.3"' >> /etc/openvpn/server.conf
		;;
		6) 
		echo 'push "dhcp-option DNS 64.6.64.6"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 64.6.65.6"' >> /etc/openvpn/server.conf
		;;
	esac
echo "keepalive 10 120
cipher AES-256-CBC
comp-lzo
user nobody
group $GROUPNAME
persist-key
persist-tun
status openvpn-status.log
verb 3
crl-verify crl.pem
client-to-client
client-cert-not-required
username-as-common-name
plugin /usr/lib/openvpn/openvpn-plugin-auth-pam.so login" >> /etc/openvpn/server.conf

	# Enable net.ipv4.ip_forward for the system
	sed -i '/\<net.ipv4.ip_forward\>/c\net.ipv4.ip_forward=1' /etc/sysctl.conf
	if ! grep -q "\<net.ipv4.ip_forward\>" /etc/sysctl.conf; then
		echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
	fi
	# Avoid an unneeded reboot
	echo 1 > /proc/sys/net/ipv4/ip_forward
	# Needed to use rc.local with some systemd distros
	if [[ "$OS" = 'debian' && ! -e $RCLOCAL ]]; then
		echo '#!/bin/sh -e
exit 0' > $RCLOCAL
	fi
	chmod +x $RCLOCAL
	# Regras IPTABLES

iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP

sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP" $RCLOCAL

if pgrep firewalld; then
		firewall-cmd --zone=public --add-port=$PORT/$PROTOCOL
		firewall-cmd --zone=trusted --add-source=10.8.0.0/24
		firewall-cmd --permanent --zone=public --add-port=$PORT/$PROTOCOL
		firewall-cmd --permanent --zone=trusted --add-source=10.8.0.0/24
fi

if iptables -L -n | grep -qE 'REJECT|DROP'; then
iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT
iptables -F
iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT

sed -i "1 a\iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT" $RCLOCAL
sed -i "1 a\iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT" $RCLOCAL
sed -i "1 a\iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" $RCLOCAL
fi
	if hash sestatus 2>/dev/null; then
		if sestatus | grep "Current mode" | grep -qs "enforcing"; then
			if [[ "$PORT" != '1194' || "$PROTOCOL" = 'tcp' ]]; then
				if ! hash semanage 2>/dev/null; then
					yum install policycoreutils-python -y
				fi
				semanage port -a -t openvpn_port_t -p $PROTOCOL $PORT
			fi
		fi
	fi
	if [[ "$OS" = 'debian' ]]; then
		if pgrep systemd-journal; then
			systemctl restart openvpn@server.service
		else
			/etc/init.d/openvpn restart
		fi
	else
		if pgrep systemd-journal; then
			systemctl restart openvpn@server.service
			systemctl enable openvpn@server.service
		else
			service openvpn restart
			chkconfig openvpn on
		fi
	fi
	EXTERNALIP=$(wget -4qO- "http://whatismyip.akamai.com/")
	if [[ "$IP" != "$EXTERNALIP" ]]; then
		read -p "DIGITE SEU IP EXTERNO: " -e USEREXTERNALIP
		if [[ "$USEREXTERNALIP" != "" ]]; then
			IP=$USEREXTERNALIP
		fi
	fi
read -p "Digite Sua Porta Padrao do Squid: " port_p
if [ "$port_p" = "" ]; then
port_p="80"
fi
echo "client
dev tun
proto $PROTOCOL
sndbuf 0
rcvbuf 0
remote $IP $PORT
http-proxy-option CUSTOM-HEADER X-Online-Host  $hostx
http-proxy $IP $port_p
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
comp-lzo
setenv opt block-outside-dns
key-direction 1
verb 3
auth-user-pass" > /etc/openvpn/client-common.txt
echo -e "\033[1;31mOPENVPN INSTALADO COM SUCESSO!"
minhas_portas
}

if [ "$1" = "" ]; then
if readlink /proc/$$/exe | grep -qs "dash"; then
	echo "This script needs to be run with bash, not sh"
	exit
fi
if [[ "$EUID" -ne 0 ]]; then
	echo "Sorry, you need to run this as root"
	exit
fi
if [[ ! -e /dev/net/tun ]]; then
	echo "TUN is not available"
	exit
fi
if grep -qs "CentOS release 5" "/etc/redhat-release"; then
	echo "CentOS 5 is too old and not supported"
	exit
fi
if [[ -e /etc/debian_version ]]; then
	OS=debian
	GROUPNAME=nogroup
	RCLOCAL='/etc/rc.local'
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
	GROUPNAME=nobody
	RCLOCAL='/etc/rc.d/rc.local'
else
	echo "Looks like you aren't running this installer on a Debian, Ubuntu or CentOS system"
	exit 5
fi
instalar_squid
instalar_openvpn
elif [ "$1" != "" ]; then
remover_ovpn
fi