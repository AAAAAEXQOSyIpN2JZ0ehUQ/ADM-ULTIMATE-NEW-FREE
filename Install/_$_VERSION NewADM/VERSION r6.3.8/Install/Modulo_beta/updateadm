#!/bin/bash

#COMPARA
fun_filez () {
arq="/etc/adm-lite/$1"
arq2="$HOME/update/$1"
     [[ ! -e "/etc/adm-lite/$1" ]] && {
     mv -f $arq2 $arq
     return
     }
equal=$(diff -q $arq $arq2)
echo -e "\033[1;31m ${txt[203]}: $1"
     [[ "$equal" = "" ]] && rm $arq2 || {
     mv -f $arq2 $arq
     chmod +x $arq
     lista_atualizados=$(($lista_atualizados + 1))
     echo -e "\033[1;32m ${txt[204]}: $1 - ${txt[205]}!"
     sleep 0.5s
     echo ""
     }
}

#ATUALIZACAO
atualiza_fun () {
echo -e "${cor[2]} OK, key: ${cor[3]}$serial${cor[2]} ${txt[207]}"
echo -e "${cor[1]} =================================== ${cor[0]}"
cd $HOME
[[ ! -d ./update ]] && mkdir ./update
cd ./update
while read arq_adm; do
wget $arq_adm -o /dev/null
done < $HOME/lista
for arqs in `ls $HOME/update`; do
fun_filez $arqs
done
[[ -e $HOME/lista ]] && rm $HOME/lista
[[ ! -d $HOME/update ]] && rm -rf $HOME/update
   [[ "$lista_atualizados" != "" ]] && {
   echo -e "${cor[5]} $lista_atualizados ${txt[206]}"
   rm /etc/adm-lite/idioma
   }
echo -e "${cor[1]} =================================== ${cor[0]}"
}

#OFUSCATE 
ofuscate_fun () {
number=$(expr length $1)
for((i=1; i<$number+1; i++)); do
txt[$i]=$(echo "$1" | cut -b $i)
if [ "${txt[$i]}" = "." ]; then
txt[$i]="#"
elif [ "${txt[$i]}" = "#" ]; then
txt[$i]="."
fi
if [ "${txt[$i]}" = "1" ]; then
txt[$i]="@"
elif [ "${txt[$i]}" = "@" ]; then
txt[$i]="1"
fi
if [ "${txt[$i]}" = "2" ]; then
txt[$i]="?"
elif [ "${txt[$i]}" = "?" ]; then
txt[$i]="2"
fi
if [ "${txt[$i]}" = "3" ]; then
txt[$i]="&"
elif [ "${txt[$i]}" = "&" ]; then
txt[$i]="3"
fi
txtofus+="${txt[$i]}"
done
link_list=$(echo $txtofus|rev)
txt_ofuscatw=$(echo $txtofus|rev)
}

#VERIFICACAO
verificarkey_fun () {
serialx=$(echo $serial|cut -d'+' -f1)
serialy=$(echo $serial|cut -d'+' -f2)
ofuscate_fun $serialx
server=$(echo ${txt_ofuscatw}|cut -d':' -f1)
request='encapsulate --fd 3 -si4o5 sh -c "cat<&4;echo ${txt}>&5"'
echo -e "txt=$serialy\n$request" > $HOME/tmp && chmod +x $HOME/tmp
respserver=$(hose ${server} 2000 --fd 3 sh -c "$HOME/tmp" 2> /dev/null)
rm $HOME/tmp
      [[ $respserver != "" ]] && {
      echo -e "${cor[2]} Key: ${cor[3]}$serial"
      sleep 5s
      wget -O lista http://${txt_ofuscatw}/${respserver}/lista -o /dev/null
               [[ "$(cat $HOME/lista | grep $link_list/${key[1]})" != "" ]] && atualiza_fun || {
               [[ -e $HOME/lista ]] && rm $HOME/lista
               echo -e "${cor[2]} ${txt[208]}"
               echo -e "${cor[1]} ================================== ${cor[0]}"
               sleep 2s
               exit 1
               }
      }
}

#CORES
cor[1]="\033[1;36m"
cor[2]="\033[1;32m"
cor[3]="\033[1;31m"
cor[4]="\033[1;33m"
cor[0]="\033[1;37m"

#TEXTOS
txt[208]="Invalid Key, Contact the Script Admin!"
txt[207]="Valid!!!"
txt[203]="Analizing"
txt[204]="File"
txt[205]="Actualized"

cd $HOME
[[ -d $HOME/update ]] && rm -rf $HOME/update
[[ -e $HOME/lista ]] && rm $HOME/lista
echo -e "${cor[1]} =================================== ${cor[2]}"
echo -ne " KEY: \033[1;37m"; read serial
[[ $serial != "" ]] && verificarkey_fun || {
echo -e "${cor[2]} ${txt[208]}"
echo -e "${cor[1]} ================================== ${cor[0]}"
sleep 2s
}