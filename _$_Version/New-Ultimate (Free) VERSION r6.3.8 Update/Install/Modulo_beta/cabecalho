#!/bin/bash
clear

#DECLARACAO DE VARIAVEIS
_tmp="./usuarios_cache"
_tmp2="./usuarios_cache2"
_tmp3="./usuarios_cache3"
_tmp4="./usuarios_cache4"
_tmp5="./version"
_cacheDIR="./autoonline"
_dr="./idioma"
dir_user="./userDIR"
dir="/etc/adm-lite"
tempousers="./tempo_conexao"
_modulos="./modulos"
_cores="./cores"

#ARQUIVOS TEMPORARIOS
[[ -e $_tmp ]] && rm $_tmp
[[ -e $_tmp2 ]] && rm $_tmp2
[[ -e $_tmp3 ]] && rm $_tmp3
[[ -e $_tmp4 ]] && rm $_tmp4
[[ -e $_tmp5 ]] && rm $_tmp5
[[ -e $_cacheDIR ]] && rm $_cacheDIR
[[ ! -d "$dir_user" ]] && mkdir $dir_user

#SISTEMADEMODULOS
unset OPENVPN
unset limiter_on
[[ -e /etc/openvpn/server.conf ]] && {
[[ -e /etc/openvpn/openvpn-status.log ]] && OPENVPN="on" || echo -e "OPENVPN ERROR"
}
[[ -e "$_modulos" ]] && {
 while read _module; do
 [[ "$_module" = "OPENSSH" ]] && OPENSSH="on"
 [[ "$_module" = "DROPBEAR" ]] && DROPBEAR="on"
 [[ "$_module" = "VERIFICAR" ]] && VERIFICAR="on"
 done < $_modulos
 } || {
touch $_modulos
}

#TEXTOS
[[ "$(echo ${txt[0]})" = "" ]] && source idioma_geral
_system=$(cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/      //')
[[ "$_os" = "" ]] && system[1]=$(echo $_system) && system[2]=$(echo ${system[1]} | awk '{print $1, $2}') && _os="\033[1;31m${system[2]}"
_on="\033[1;32m${txt[10]}"
_off="\033[1;31m${txt[11]}"

#PIDSVARIAVEIS
unset pid_badvpn && pid_badvpn=$(netstat -nlpt | egrep -o udpgw)
unset fail2_ban && fail2_ban=$(dpkg -l | grep fail2ban | grep ii)
[[ "$pid_badvpn" != "" ]] && _badvpn="$_on" || _badvpn="$_off"
[[ `grep -c "^#ADM" /etc/sysctl.conf` -eq 0 ]] && _tcpspeed="$_off" || _tcpspeed="$_on"
[[ "$fail2_ban" = "" ]] && fail_b="$_off" || fail_b="$_on"
[[ "$VERIFICAR" = "on" ]] && VERIFICAR_PID="$_on" || VERIFICAR_PID="$_off"
[[ -e ./onlines ]] && __onlines="\033[1;31m$(cat ./onlines)" || __onlines="$_off"
[[ -e ./vencidos ]] && __vencidos="\033[1;31m$(cat ./vencidos)" || __vencidos="$_off"
[[ "$(ps x | grep "ultimatebot" | grep -v "grep")" != "" ]] && bot="$_on" || bot="$_off"
if [ -e /etc/squid/squid.conf ]; then
squid_var="/etc/squid/squid.conf"
elif [ -e /etc/squid3/squid.conf ]; then
squid_var="/etc/squid3/squid.conf"
fi
[[ -e $squid_var ]] && {
teste_cache="#CACHE DO SQUID"
[[ `grep -c "^$teste_cache" $squid_var` -eq 0 ]] && _cachesquid="$_off" || _cachesquid="$_on"
}

#FUNCOES
funcao_addcores () {
if [ "$1" = "0" ]; then
cor[$2]="\033[0m"
elif [ "$1" = "1" ]; then
cor[$2]="\033[1;31m"
elif [ "$1" = "2" ]; then
cor[$2]="\033[1;32m"
elif [ "$1" = "3" ]; then
cor[$2]="\033[1;33m"
elif [ "$1" = "4" ]; then
cor[$2]="\033[1;34m"
elif [ "$1" = "5" ]; then
cor[$2]="\033[1;35m"
elif [ "$1" = "6" ]; then
cor[$2]="\033[1;36m"
elif [ "$1" = "7" ]; then
cor[$2]="\033[1;37m"
fi
}

funcao_cores1 () {
if [ "$6" = "" ]; then
echo -e "${cor[5]} ${txt[24]} ${cor[0]}"
sleep 2s
return
fi
echo "0" > $1
funcao_cores2 $2 $1
funcao_cores2 $3 $1
funcao_cores2 $4 $1
funcao_cores2 $5 $1
funcao_cores2 $6 $1
funcao_cores2 $7 $1
}

funcao_cores2 () {
if [ "$1" = "1" ]; then
echo -e "\033[1;31m${txt[25]}"
sleep 1s
echo "1" >> $2
elif [ "$1" = "2" ]; then
echo -e "\033[1;32m${txt[25]}"
sleep 1s
echo "2" >> $2
elif [ "$1" = "3" ]; then
echo -e "\033[1;33m${txt[25]}"
sleep 1s
echo "3" >> $2
elif [ "$1" = "4" ]; then
echo -e "\033[1;34m${txt[25]}"
sleep 1s
echo "4" >> $2
elif [ "$1" = "5" ]; then
echo -e "\033[1;35m${txt[25]}"
sleep 1s
echo "5" >> $2
elif [ "$1" = "6" ]; then
echo -e "\033[1;36m${txt[25]}"
sleep 1s
echo "6" >> $2
elif [ "$1" = "7" ]; then
echo -e "\033[1;37m${txt[25]}"
sleep 1s
echo "7" >> $2
elif [ "$1" -gt "7" ]; then
rm $2
funcao_cores1
fi
}

funcao_cores () {
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "${cor[5]} ${txt[21]}"
echo -e "${cor[1]} • AABBCCDDEEFF"
echo -e "${cor[2]} • AABBCCDDEEFF"
echo -e "${cor[3]} • AABBCCDDEEFF"
echo -e "${cor[4]} • AABBCCDDEEFF"
echo -e "${cor[5]} • AABBCCDDEEFF"
echo -e "${cor[6]} • AABBCCDDEEFF"
ncor[1]="\033[1;31m"
ncor[2]="\033[1;32m"
ncor[3]="\033[1;33m"
ncor[4]="\033[1;34m"
ncor[5]="\033[1;35m"
ncor[6]="\033[1;36m"
ncor[7]="\033[1;37m"
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "${ncor[1]} [1]•AA ${ncor[2]} [2]•AA ${ncor[3]} [3]•AA"
echo -e "${ncor[4]} [4]•AA ${ncor[5]} [5]•AA ${ncor[6]} [6]•AA"
echo -e "${ncor[7]} [7]•AA"
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "${cor[5]} ${txt[22]}"
unset ncor
read -p " ${txt[23]} " _cores_
funcao_cores1 $_cores $_cores_
}

[[ -e $_cores ]] && {
_cont="0"
while read _cor; do
funcao_addcores ${_cor} ${_cont}
_cont=$(($_cont + 1))
done < $_cores
} || {
cor[0]="\033[0m"
cor[1]="\033[1;34m"
cor[2]="\033[1;31m"
cor[3]="\033[1;37m"
cor[4]="\033[1;36m"
cor[5]="\033[1;33m"
cor[6]="\033[1;35m"
}

funcao_verificacao () {
[[ ! -e $_modulos ]] && touch $_modulos
  [[ "$VERIFICAR" = "on" ]] && {
  active_verif=$(cat $_modulos | egrep -v "VERIFICAR")
  echo "$active_verif" > $_modulos
  for _pids_ in `atq | awk '{print $1}'`; do
   atrm $_pids_
  done
  rm vencidos
  rm onlines
  } || {
  echo "VERIFICAR" >> $_modulos
  echo "at -f /bin/cron now + 1 min" > /bin/cron
  echo "/etc/adm-lite/verifica &" >> /bin/cron
  chmod 777 /bin/cron
  chmod 777 /etc/adm-lite/*
  bash /bin/cron
  }
unset VERIFICAR
unset __onlines
unset __vencidos
}

funcao_idioma () {
idioma[1]="ar Arabic"
idioma[2]="zh Chinese"
idioma[3]="en English"
idioma[4]="fr Franch"
idioma[5]="de German"
idioma[6]="it Italian"
idioma[7]="ja Japanese"
idioma[8]="pl Polish"
idioma[9]="pt Portuguese"
idioma[10]="ru Russian"
idioma[11]="es Spanish"
idioma[12]="tr Turkish"
i="1"
echo -e "${cor[1]} ═════════════════════════════════════════════════════════════════════ ${cor[0]}"
echo -e "${cor[5]} ${txt[77]} ${txt[78]}
 ${txt[79]}
 ${txt[80]}"
echo -e "${cor[1]} ═════════════════════════════════════════════════════════════════════ ${cor[3]}"
while true; do
[[ "${idioma[$i]}" = "" ]] && break
a=$(echo ${idioma[$i]} | awk '{print $2}')
texto1=$(printf '%-20s' "[ $i ]-$a")
i=$(($i+1))
[[ "${idioma[$i]}" = "" ]] && break
a=$(echo ${idioma[$i]} | awk '{print $2}')
texto2=$(printf '%-20s' "[ $i ]-$a")
i=$(($i+1))
[[ "${idioma[$i]}" = "" ]] && break
a=$(echo ${idioma[$i]} | awk '{print $2}')
texto3=$(printf '%-20s' "[ $i ]-$a")
i=$(($i+1))
echo -e "$texto1 $texto2 $texto3"
done
echo -e "${cor[1]} ═════════════════════════════════════════════════════════════════════ ${cor[0]}"
echo -e " ${txt[82]}"
read -p " => " idiom
number_var $idiom > /dev/null 2>&1
if [ "$var_number" != "" ]; then
 [[ "${idioma[$idiom]}" != "" ]] && id=$(echo ${idioma[$idiom]} | awk '{print $1}')
else
 [[ "$(echo "$idiom" | wc -w)" -lt "3" ]] && {
  [[ "$(echo "${idioma[@]}"|grep "$idiom")" != "" ]] && id="$idiom"
 }
fi
[[ "$id" = "" ]] && {
 echo -e " Error, Lenguaje no Seleccionado!"
 sleep 2s
 source menu
 exit 0
 }
traduzir $id > /dev/null 2>&1 &
while true; do
echo -ne "${cor[2]}["
 for((q=1; q <= 20; q++)); do
 echo -ne "${cor[3]}X"
 sleep 0.5s
 done
if [ -e $HOME/fim ]; then
echo -ne "${cor[2]}] - \033[1;32m[OK][100%]"
rm $HOME/fim
break
 else
echo -ne "${cor[2]}] - ${cor[3]} ${txt[81]}"
echo ""
fi
done
echo ""
echo -e "${cor[1]} ═════════════════════════════════════════════════════════════════════ ${cor[0]}"
echo -e "\033[0m"
unset idioma
exit 0
}

traduzir () {
[[ "$1" = "pt" ]] && rm $_dr > /dev/null && touch $HOME/fim && exit
apt-get install gawk -y > /dev/null 2>&1
[[ -e $_tmp4 ]] && rm $_tmp4
cp $_dr $_tmp4 && rm $_dr
touch $_dr
while read _texto; do
source trans -b pt:$1 "$_texto" >> "$_dr"
done < $_tmp4
unset txt
touch $HOME/fim
exit 0
}

#PREENXE_VARIAVEL $select_name
select_users () {
_cont="1"
[[ -e $_tmp3 ]] && rm $_tmp3
touch $_tmp3
for u in `awk -F : '$3 > 900 { print $1 }' /etc/passwd | grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
echo "$_cont $u" >> $_tmp3
echo -e "${cor[2]} |$_cont|•${cor[5]} $u"
[[ "$u" = "" ]] && break
_cont=$(($_cont + 1))
done
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "${cor[5]} ${txt[42]}"
echo -ne "${cor[6]}"
read -p " ${txt[9]} " select_user
if [ "$select_user" = "" ]; then
echo -e "${cor[5]} ${txt[43]}"
return
 fi
 if [ "$select_user" -le "$_cont" ] 1> /dev/null 2> /dev/null
then
select_name=$(cat $_tmp3 | head -$select_user | tail -1 | awk '{print $2}')
echo -e "${cor[5]} $name"
 else
 if cat /etc/passwd |grep $select_user: > /dev/null
then
select_name="$select_user"
else
echo -e "${cor[5]} ${txt[44]}"
echo -e "${cor[5]} ${txt[49]}"
sleep 5s
return
  fi
 fi
unset select_user
}

#PREENXE A VARIAVEL $IP
meu_ip () {
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && IP="$MEU_IP2" || IP="$MEU_IP"
}



remover_adm () {
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "${cor[5]} ${txt[209]}"
read -p " [ s / n ]: " certe_za
[[ "$certe_za" = @(s|S|y|Y) ]] && {
[[ -e /etc/openvpn/server.conf ]] && remover_ovpn & > /dev/null 2>&1
echo -e "${cor[5]} Unistaling python${cor[0]}"
apt-get purge python -y > /dev/null 2>&1
apt-get purge python3-pip -y > /dev/null 2>&1
echo -e "${cor[5]} Unistaling Nmap${cor[0]}"
apt-get purge screen -y > /dev/null 2>&1
apt-get purge nmap -y > /dev/null 2>&1
echo -e "${cor[5]} Unistaling curl${cor[0]}"
apt-get purge figlet -y > /dev/null 2>&1
apt-get purge zip -y > /dev/null 2>&1
echo -e "${cor[5]} Unistaling Dropbear/Squid${cor[0]}"
apt-get purge bc -y > /dev/null 2>&1
apt-get purge lynx -y > /dev/null 2>&1
echo -e "${cor[5]} Unistaling Apache2${cor[0]}"
apt-get purge curl -y > /dev/null 2>&1
apt-get purge squid -y > /dev/null 2>&1
echo -e "${cor[5]} Unistaling Libs${cor[0]}"
apt-get purge squid3 -y > /dev/null 2>&1
apt-get purge dropbear -y > /dev/null 2>&1
echo -e "${cor[5]} Unistaling Scripts${cor[0]}"
apt-get purge apache2 -y > /dev/null 2>&1
apt-get purge php5 libapache2-mod-php5 php5-mcrypt -y > /dev/null 2>&1
apt-get autoremove -y > /dev/null 2>&1
echo -e "${cor[5]} SUCESS! :D${cor[0]}"
[[ -e /etc/adm-lite ]] && rm -rf /etc/adm-lite
echo -e "\033[0m"
 echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
 exit
  } || {
 echo -e "${cor[1]} ${txt[210]} ${cor[0]}"
 echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
 return
 }
}

ofuscate_fun () {
unset link_list
unset txt_ofuscatw
unset txtofus
number=$(expr length $1)
for((i=1; i<$number+1; i++)); do
txt[$i]=$(echo "$1" | cut -b $i)
case ${txt[$i]} in
".")
txt[$i]="#";;
"$")
txt[$i]=".";;
"1")
txt[$i]="@";;
"@")
txt[$i]="1";;
"2")
txt[$i]="?";;
"?")
txt[$i]="2";;
"3")
txt[$i]="&";;
"&")
txt[$i]="3";;
esac
txtofus+="${txt[$i]}"
done
link_list=$(echo $txtofus|rev)
txt_ofuscatw=$(echo $txtofus|rev)
}

fun_atualizar () {
cd /etc/adm-lite
chmod 777 ./*
./updateadm
}

#GERA NOVO CLIENTE
newclient () {
cp /etc/openvpn/client-common.txt ~/$1.ovpn
echo "<ca>" >> ~/$1.ovpn
cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~/$1.ovpn
echo "</ca>" >> ~/$1.ovpn
echo "<cert>" >> ~/$1.ovpn
cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >> ~/$1.ovpn
echo "</cert>" >> ~/$1.ovpn
echo "<key>" >> ~/$1.ovpn
cat /etc/openvpn/easy-rsa/pki/private/$1.key >> ~/$1.ovpn
echo "</key>" >> ~/$1.ovpn
echo "<tls-auth>" >> ~/$1.ovpn
cat /etc/openvpn/ta.key >> ~/$1.ovpn
echo "</tls-auth>" >> ~/$1.ovpn
}

open_1 () {
CLIENT="$1"
senha="$2"
daysrnf="$3"
limit="$4"
sen="$5"
cd /etc/openvpn/easy-rsa/
./easyrsa build-client-full $CLIENT nopass
newclient "$CLIENT"
echo ""
echo "$CLIENT KEY" ~/"$CLIENT.ovpn"
valid=$(date '+%C%y-%m-%d' -d " +$daysrnf days")
datexp=$(date "+%d/%m/%Y" -d "+ $daysrnf days")
useradd -M -s /bin/false -d /home/ovpn/ $CLIENT -e $valid
usermod -p $(openssl passwd -1 $senha) $CLIENT
 [[ "$sen" = "s" || "$sen" = "S" ]] && {
 sed -e "s;auth-user-pass;<auth-user-pass>\n$CLIENT\n$senha\n</auth-user-pass>;g" $HOME/$CLIENT.ovpn > $HOME/teste.ovpn
 mv -f $HOME/teste.ovpn $HOME/$CLIENT.ovpn
 zip $HOME/$CLIENT.zip $HOME/$CLIENT.ovpn
 rm $HOME/$CLIENT.ovpn
 }
cd /etc/adm-lite
echo "senha: $senha" > $dir_user/$CLIENT
echo "limite: $limit" >> $dir_user/$CLIENT
echo "data: $valid" >> $dir_user/$CLIENT
}

open_2 () {
CLIENT="$1"
cd /etc/openvpn/easy-rsa/
./easyrsa --batch revoke $CLIENT
./easyrsa gen-crl
rm -rf pki/reqs/$CLIENT.req
rm -rf pki/private/$CLIENT.key
rm -rf pki/issued/$CLIENT.crt
rm -rf /etc/openvpn/crl.pem
cp /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn/crl.pem
chown nobody:$GROUPNAME /etc/openvpn/crl.pem
echo ""
userdel --force $CLIENT
cd /etc/adm-lite
[[ -e $dir_user/$CLIENT ]] && rm $dir_user/$CLIENT
}

#SISTEMA PORTAS
open_port () {
tmp_arq="/tmp/arq-tmp"
 while read arquivo; do
if [ ! -e "$tmp_arq" ]; then
echo "$arquivo" > $tmp_arq
else
echo "$arquivo" >> $tmp_arq
fi
if [ "$(echo "$arquivo" | awk '{print $1}')" = "$2" ]; then
 if [ "$(cat $tmp_arq | grep "$2 $3" | wc -l)" = "0" ]; then
 echo "$2 $3" >> $tmp_arq
 fi
fi
done < $1
mv -f $tmp_arq $1
}

open_dropbear () {
tmp_arq="/tmp/arq-tmp"
arquivo="/etc/default/dropbear"
echo -e "${cor[2]} |1|•${cor[5]} ${txt[279]}"
echo -e "${cor[2]} |2|•${cor[5]} ${txt[280]}\033[1;37m"
read -p " [ 1 / 2 ]: " escolhaas
if [ "$escolhaas" = "1" ]; then
porta="$1"
sed "s;-p $porta ;;g" $arquivo > $tmp_arq
mv -f $tmp_arq $arquivo
service dropbear restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
elif [ "$escolhaas" = "2" ]; then
read -p " Nova Porta: " newport
porta="$newport"
sed -i "s/443/$porta -p 443/g" $arquivo
service dropbear restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
fi
}

open_squid () {
tmp_arq="/tmp/arq-tmp"
if [ -d "/etc/squid" ]; then
arquivo="/etc/squid/squid.conf"
elif [ -d "/etc/squid3" ]; then
arquivo="/etc/squid3/squid.conf"
fi
echo -e "${cor[2]} |1|•${cor[5]} ${txt[279]}"
echo -e "${cor[2]} |2|•${cor[5]} ${txt[280]}\033[1;37m"
read -p " [ 1 / 2 ]: " escolhaas
if [ "$escolhaas" = "1" ]; then
porta="$1"
cat $arquivo | grep -v "http_port $porta" > $tmp_arq
mv -f $tmp_arq $arquivo
service squid3 restart > /dev/null 2>&1 &
service squid restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
elif [ "$escolhaas" = "2" ]; then
read -p " Nova Porta: " newport
open_port "$arquivo" "http_port" "$newport"
service squid3 restart > /dev/null 2>&1 &
service squid restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
fi
}

open_ssh () {
tmp_arq="/tmp/arq-tmp"
arquivo="/etc/ssh/sshd_config"
echo -e "${cor[2]} |1|•${cor[5]} ${txt[279]}"
echo -e "${cor[2]} |2|•${cor[5]} ${txt[280]}\033[1;37m"
read -p " [ 1 / 2 ]: " escolhaas
if [ "$escolhaas" = "1" ]; then
porta="$1"
cat $arquivo | grep -v "Port $porta" > $tmp_arq
mv -f $tmp_arq $arquivo
service ssh restart > /dev/null 2>&1 &
service sshd restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
elif [ "$escolhaas" = "2" ]; then
read -p " Nova Porta: " newport
open_port "$arquivo" "Port" "$newport"
service ssh restart > /dev/null 2>&1 &
service sshd restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
fi
}

minhas_portas () {
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[4]}"
portas_var="/tmp/portas"
porta_var="/tmp/portas2"
lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN" > $portas_var
while read port; do
var1=$(echo $port | awk '{print $1}')
var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
 if [ ! -e "$porta_var" ]; then
 echo -e "$var1 $var2" > $porta_var
 fi
 if [ "$(cat $porta_var | grep "$var1" | grep "$var2")" = "" ]; then
 echo -e "$var1 $var2" >> $porta_var
 fi
done < $portas_var
i=1
while read pts; do
 if [ "$pts" = "" ]; then
 break
 fi
service_porta[$i]=$(echo "$pts" | awk '{print $2}')
service_serv[$i]=$(echo "$pts" | awk '{print $1}')
echo -e " [$i] -> ${service_serv[$i]} : ${service_porta[$i]}"
i=$(($i+1))
done < $porta_var
echo -e "${cor[5]} ${txt[277]}"
echo -e "${cor[1]} ═══════════════════════════════════ \033[1;37m"
read -p " [1-$(($i-1))]: " nun
echo -e "\033[1;31m ${txt[283]} \033[1;32m${service_porta[$nun]}\033[1;31m : \033[1;32m${service_serv[$nun]}\033[0m"
rm $portas_var
rm $porta_var
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
if [ "${service_serv[$nun]}" = "dropbear" ]; then
open_dropbear ${service_porta[$nun]}
elif [ "${service_serv[$nun]}" = "sshd" ]; then
open_ssh ${service_porta[$nun]}
elif [ "${service_serv[$nun]}" = "squid3" ]; then
open_squid ${service_porta[$nun]}
elif [ "${service_serv[$nun]}" = "squid" ]; then
open_squid ${service_porta[$nun]}
else
echo -e "\033[1;31m ${txt[278]}\033[0m"
fi
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
}

#VERIFICA SE E NUMERICO
number_var () {
unset var_number
if (echo "$1" | egrep '[^0-9]' &> /dev/null); then
echo -e "${cor[5]} ${txt[98]}"
else
var_number="$1"
fi
}

minhas_portas_sslfun () {
#CAPTURA DOS VALORES
total_portas=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
#CRIA ARQUIVO TEMPORARIO
echo "$total_portas" > ./arqtmp
#LOOP COM OS VALORES
while read port; do
porta=$(echo ${port}|awk '{print $1}'|tail -1)
servi=$(echo ${port}|awk -F ":" '{print $2}'|tail -1)
[[ $(echo ${portaVAR[@]}|grep "$porta $servi") = "" ]] && portaVAR+="$porta $servi\n"
done < ./arqtmp
#APAGA VALOR TEMPORARIO
rm ./arqtmp
#IMPRIME RESULTADO
echo -e "$portaVAR"
unset portaVAR
}

ssl_stunel () {
unset lista_porta
#LISTANDO PORTAS
lista_porta=($(echo -e "$(minhas_portas|grep sshd|awk '{print $2}')"))
lista_porta=($(echo -e "$(minhas_portas|grep dropbear|awk '{print $2}')"))
if [[ ${lista_porta[@]} != "" ]]; then
    echo -e " \033[1;32m${txt[293]}\033[1;33m"
    i=0
         for select in `echo -e ${lista_porta[@]}`; do
         echo -e "[$i] $select"
         let i++
         done
    echo -ne "\033[1;32m"
         while true; do
         read -p " ${txt[294]}: " portx
         [[ ${lista_porta[$portx]} != "" ]] && break
         echo -e " ${txt[295]}"
         done
else
    echo -e " \033[1;31m${txt[296]}\033[0m"
    sleep 3s
    exit 1
fi
DPORT="${lista_porta[$portx]}"
unset lista_porta
echo -e "\033[1;33m ${txt[297]}\033[1;32m"
    while true; do
    read -p "Listen Port Ssl: " SSLPORT
    [[ $(minhas_portas_sslfun|grep $SSLPORT) = "" ]] && break
    echo -e " ${SSLPORT}: ${txt[298]}"
    unset SSLPORT
    done
apt-get install stunnel4 -y > /dev/null 2>&1
echo -e "cert = /etc/stunnel/stunnel.pem\nclient = no\nsocket = a:SO_REUSEADDR=1\nsocket = l:TCP_NODELAY=1\nsocket = r:TCP_NODELAY=1\n\n[stunnel]\nconnect = 127.0.0.1:${DPORT}\naccept = ${SSLPORT}" > /etc/stunnel/stunnel.conf
openssl genrsa -out key.pem 2048
echo -e "\033[1;33m ${txt[299]}\033[1;32m"
openssl req -new -x509 -key key.pem -out cert.pem -days 1095
cat key.pem cert.pem >> /etc/stunnel/stunnel.pem
sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
service stunnel4 restart
echo -e "\033[0m"
}

cript_sh () {
encript=(aes-256-gcm aes-192-gcm aes-128-gcm aes-256-ctr aes-192-ctr aes-128-ctr aes-256-cfb aes-192-cfb aes-128-cfb camellia-128-cfb camellia-192-cfb camellia-256-cfb chacha20-ietf-poly1305 chacha20-ietf chacha20 rc4-md5)
s=0
echo -e " ${cor[1]}═══════════════════════════════════\n${cor[5]} ${txt[300]}\n ${cor[1]}===================================\n\033[1;32m"
      for enc in `echo ${encript[@]}`; do
      VAR_EN+=" [${s}] - ${enc}\n"
      s=$(($s+1))
      done
echo -e "${VAR_EN}"
unset VAR_EN
echo -e "${cor[1]} ═══════════════════════════════════ \033[1;37m"
read -p " ${txt[301]}: " sele
encriptacao="${encript[$sele]}"
}

ahadowsocks () {
[[ $(ps x|grep ssserver|grep -v grep|awk '{print $1}') != "" ]] && kill -9 $(ps x|grep ssserver|grep -v grep|awk '{print $1}') > /dev/null 2>&1 && ssserver -c /etc/shadowsocks.json -d stop > /dev/null 2>&1
       while true; do
       cript_sh
       [[ ${encriptacao} != "" ]] && break
       echo -e "\033[1;31m ${txt[302]}\033[0m"
      done
#ESCOLHENDO LISTEN
      while true; do
      read -p " Listen Port: " Lport
      [[ $(minhas_portas_sslfun|grep "$Lport") = "" ]] && break
      echo -e " ${Lport}: ${txt[298]}"
      unset Lport
      done
#INICIANDO
read -p" ${txt[303]} " Pass
apt-get install python-pip python-m2crypto -y > /dev/null 2>&1
pip install shadowsocks > /dev/null 2>&1
echo -ne '{\n"server":"' > /etc/shadowsocks.json
echo -ne "0.0.0.0" >> /etc/shadowsocks.json
echo -ne '",\n"server_port":' >> /etc/shadowsocks.json
echo -ne "${Lport},\n" >> /etc/shadowsocks.json
echo -ne '"local_port":1080,\n"password":"' >> /etc/shadowsocks.json
echo -ne "${Pass}" >> /etc/shadowsocks.json
echo -ne '",\n"timeout":600,\n"method":"aes-256-cfb"\n}' >> /etc/shadowsocks.json
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "\033[1;31m STARTING\033[0m"
ssserver -c /etc/shadowsocks.json -d start > /dev/null 2>&1
value=$(ps x |grep ssserver|grep -v grep)
[[ $value != "" ]] && value="\033[1;32mSTARTED" || value="\033[1;31mERROR"
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e " ${value} ${cor[0]}"
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
read -p " Enter"
}

SSL_fun () {
while true; do
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "\033[1;36m ${txt[292]}"
echo -ne "\033[1;32m"
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "${cor[2]} |0|• ${cor[3]} ${txt[13]}"
echo -e "${cor[2]} |1|• ${cor[3]} SSL"
echo -e "${cor[2]} |2|• ${cor[3]} SHADOWSOCKS"
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
read -p " Opt: " optionss
[[ $optionss = "1" ]] && ssl_stunel && break
[[ $optionss = "2" ]] && ahadowsocks && break
[[ $optionss = "0" ]] && break
done
}

teste_socket () {
unset pass
teste_sok=$(lsof -i tcp:$1)
if [ "$teste_sok" = "" ]; then
pass="OK"
return
 else
pass=$(echo "$teste_sok" | awk '{print $1}' | tail -1)
fi
}

ver_socks () {
echo -ne "$c"
var=$(netstat -nltp | grep python |awk -F "/" '{print $1}')
echo -e "${cor[2]}═════════════════════════════════════════════════════════════════════"
if [ "$var" != "" ]; then
echo -e "\033[1;32m${var}"
 else
echo -e "\033[1;32m${txt[257]}"
fi
echo -e "${cor[2]}═════════════════════════════════════════════════════════════════════"
}

parar_socks () {
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "${b} ${txt[237]}"
pid=$(ps x | grep "get.py" | grep -v grep | awk '{print $1}')
if [ "$pid" != "" ]; then
for pids in $(echo $pid); do
kill -9 $pids > /dev/null 2>&1
done
fi
pidproxy=$(ps x | grep "proxypub.py" | grep -v "grep" | awk -F "pts" '{print $1}')
kill -9 $pidproxy > /dev/null 2>&1
pidproxy2=$(ps x | grep "proxydirect.py" | grep -v "grep" | awk -F "pts" '{print $1}')
kill -9 $pidproxy2 > /dev/null 2>&1
pidproxy3=$(ps x | grep "proxypriv.py" | grep -v "grep" | awk -F "pts" '{print $1}')
kill -9 $pidproxy3 > /dev/null 2>&1
sleep 2s
echo -e " ${txt[237]}"
}

ligar_proxy () {
cd $dir
while true; do
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "${b} ${txt[239]}"
echo -e "${b}  ${txt[240]}"
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
read -p " ${txt[9]} " porta_socket
teste_socket $porta_socket
if [ "$pass" = "OK" ]; then
break
 else
echo -e "${b} ${txt[241]} ${cor[2]} $pass"
echo -e "${b} ${txt[242]}"
echo -e "${b} ${txt[243]} ${cor[2]}$porta_socket ${b}${txt[244]} ${c}"
read -p " ${txt[245]}"
fi
done
echo -e "${b} ${txt[246]} ${cor[4]}"
read -p " ${txt[9]} " texto_soket
echo -e "${b} ${txt[247]}"
echo -e "\033[1;31m [ 1 ]• \033[1;33m${txt[248]}"
echo -e "\033[1;31m [ 2 ]• \033[1;33m${txt[309]}"
echo -e "\033[1;31m [ 3 ]• \033[1;33m${txt[249]} ${cor[4]}"
unset portproxy
read -p " ${txt[9]} " portproxy
meu_ip
[[ "$portproxy" = "1" ]] && screen -dmS screen python ./proxypub.py "$porta_socket" "$texto_soket" || screen -dmS screen python ./proxydirect.py "$porta_socket" "$texto_soket" || screen -dmS screen python3 ./proxypriv.py "$porta_socket" "$texto_soket" "$IP"
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
sleep 3s
unset pass
teste_socket $porta_socket
if [ "$pass" = "OK" ]; then
echo -e "${cor[2]} ${txt[250]}"
 else
echo -e "${c} ${txt[251]}, $pass : $porta_socket"
fi
}

start_natura () {
cd $dir
echo -e "${cor[3]} ${txt[272]}"
read -p " => " portas
teste_socket $portas
if [ "$pass" != "OK" ]; then
echo -e "\033[1;31m ${txt[273]} $pass"
return
fi
sed -s "s;CONFIG_LISTENING = '0.0.0.0:8799';CONFIG_LISTENING = '0.0.0.0:$portas';g" ./get > ./get.py
screen -dmS screen python ./get.py
sleep 1s
rm ./get.py
if [ "$(ps x | grep get.py | grep -v grep | awk '{print $1}')" != "" ]; then
echo ""
echo -e "${cor[3]} ${txt[275]}"
echo -e "${cor[3]} ${txt[274]} \033[1;32m ADMMANAGER"
sleep 1s
 else
echo ""
echo -e "${cor[3]} ${txt[276]}"
sleep 1s
fi
}

proxy_soks () {
b="\033[1;33m"
c="\033[1;32m"
while true; do
cd $dir
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "${cor[2]} ${txt[252]}"
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
echo -e "${cor[2]} |0|•${cor[4]} ${txt[13]}"
echo -e "${cor[2]} |1|•${cor[3]} ${txt[253]}"
echo -e "${cor[2]} |2|•${cor[3]} ${txt[254]}"
echo -e "${cor[2]} |3|•${cor[3]} ${txt[255]}"
echo -e "${cor[2]} |4|•${cor[3]} ${txt[271]}"
echo -e "${cor[2]} |5|•${cor[3]} ${txt[304]}"
echo -e "${cor[1]} ═══════════════════════════════════ ${cor[0]}"
read -p " ${txt[9]} " optchange
case $optchange in
0)
break
;;
1)
ligar_proxy
;;
2)
parar_socks
;;
3)
ver_socks
;;
4)
start_natura
;;
5)
chmod +x ./overtcp
./overtcp
;;
esac
done
return
}

credit=$(cat ./menu_credito)
#${cor[211]} 
echo -e "${cor[1]} =================================== ${cor[0]}"
echo -e "${cor[2]} ∆ ${cor[3]} $credit"
echo -e "${cor[2]} √ ${cor[3]} ${txt[0]}"
echo -e "${cor[1]} =================================== ${cor[0]}"
echo -e "${cor[2]} ° ${cor[3]} ${txt[1]} $__onlines"
echo -e "${cor[2]} ° ${cor[3]} ${txt[2]} $__vencidos"
echo -e "${cor[2]} ° ${cor[3]} ${txt[3]} $_os"